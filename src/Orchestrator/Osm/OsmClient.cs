//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Middleware.Orchestrator.Osm
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IOsmClient
    {
        /// <summary>
        /// Query information about multiple NS descriptor resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsdInfo>> GetNSDsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS descriptor resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsdInfo>> GetNSDsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new NS descriptor resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddNSDAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NS descriptor resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddNSDAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read information about an individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsdInfo> GetNSDAsync(string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsdInfo> GetNSDAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSDAsync(string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSDAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify the data of an  individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNSDAsync(object body, string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify the data of an  individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNSDAsync(object body, string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch the content of a NSD
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetNSDcontentAsync(string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch the content of a NSD
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetNSDcontentAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload the content of a NSD
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNSDcontentAsync(object body, string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload the content of a NSD
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNSDcontentAsync(object body, string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch individual NS package artifact
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetNsPkgArtifactAsync(string nsdInfoId, string artifactPath);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch individual NS package artifact
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetNsPkgArtifactAsync(string nsdInfoId, string artifactPath, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read NSD of an on-boarded NS package
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetNsPkgNsdAsync(string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read NSD of an on-boarded NS package
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetNsPkgNsdAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload a NS package by providing the content of the NS package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> UploadNsPkgsContentAsync(FileParameter body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a NS package by providing the content of the NS package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> UploadNsPkgsContentAsync(FileParameter body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NS package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsdInfo>> GetNsPkgsContentAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsdInfo>> GetNsPkgsContentAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read information about an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsdInfo> GetNsPkgsIdContentAsync(string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsdInfo> GetNsPkgsIdContentAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNsPkgsIdContentAsync(object body, string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNsPkgsIdContentAsync(object body, string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSPkgsIdContentAsync(string nsdInfoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSPkgsIdContentAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple VNF package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfPkgInfo>> GetVnfPkgsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VNF package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfPkgInfo>> GetVnfPkgsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new VNF package resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddVnfPkgAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new VNF package resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddVnfPkgAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read information about an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VnfPkgInfo> GetVnfPkgAsync(string vnfPkgId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VnfPkgInfo> GetVnfPkgAsync(string vnfPkgId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVnfPkgAsync(string vnfPkgId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVnfPkgAsync(string vnfPkgId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateVnfPkgAsync(object body, string vnfPkgId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateVnfPkgAsync(object body, string vnfPkgId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read VNFD of an on-boarded VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVnfPkgVnfdAsync(string vnfPkgId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read VNFD of an on-boarded VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetVnfPkgVnfdAsync(string vnfPkgId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch an on-boarded VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetVnfPkgContentAsync(string vnfPkgId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch an on-boarded VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetVnfPkgContentAsync(string vnfPkgId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload a VNF package by providing the content of the VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadVnfPkgContentAsync(FileParameter body, string vnfPkgId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a VNF package by providing the content of the VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UploadVnfPkgContentAsync(FileParameter body, string vnfPkgId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch individual VNF package artifact
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetVnfPkgArtifactAsync(string vnfPkgId, string artifactPath);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch individual VNF package artifact
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetVnfPkgArtifactAsync(string vnfPkgId, string artifactPath, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload a VNF package by providing the content of the VNF package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> UploadVnfPkgsContentAsync(FileParameter body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a VNF package by providing the content of the VNF package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> UploadVnfPkgsContentAsync(FileParameter body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple VNF package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfPkgInfo>> GetVnfPkgsContentAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VNF package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfPkgInfo>> GetVnfPkgsContentAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read information about an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VnfPkgInfo> GetVnfPkgsIdContentAsync(string packageContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VnfPkgInfo> GetVnfPkgsIdContentAsync(string packageContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateVnfPkgsIdContentAsync(object body, string packageContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateVnfPkgsIdContentAsync(object body, string packageContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVnfPkgsIdContentAsync(string packageContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVnfPkgsIdContentAsync(string packageContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NS instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsInstance>> GetNSinstancesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsInstance>> GetNSinstancesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new NS instance resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddNSinstanceAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NS instance resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddNSinstanceAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <param name="vcaStatusRefresh">Set to true if vca status needs to be refreshed.</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsInstance> GetNSinstanceAsync(string nsInstanceId, bool? vcaStatusRefresh);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <param name="vcaStatusRefresh">Set to true if vca status needs to be refreshed.</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsInstance> GetNSinstanceAsync(string nsInstanceId, bool? vcaStatusRefresh, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <param name="vcaStatusRefresh">Set to true if vca status needs to be refreshed.</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSinstanceAsync(string nsInstanceId, bool? vcaStatusRefresh);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <param name="vcaStatusRefresh">Set to true if vca status needs to be refreshed.</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSinstanceAsync(string nsInstanceId, bool? vcaStatusRefresh, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Instantiate a NS
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> InstantiateNSinstanceAsync(object body, string nsInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Instantiate a NS
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> InstantiateNSinstanceAsync(object body, string nsInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Scale a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ScaleNSinstanceAsync(object body, string nsInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Scale a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ScaleNSinstanceAsync(object body, string nsInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Terminate a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> TerminateNSinstanceAsync(object body, string nsInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Terminate a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> TerminateNSinstanceAsync(object body, string nsInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Execute an action on a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> ActionOnNSinstanceAsync(NSinstanceActionRequest body, string nsInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute an action on a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> ActionOnNSinstanceAsync(NSinstanceActionRequest body, string nsInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NS instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsInstance>> GetNSinstancesContentAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsInstance>> GetNSinstancesContentAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new NS instance
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateNSinstanceContentResponse> CreateNSinstanceContentAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NS instance
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateNSinstanceContentResponse> CreateNSinstanceContentAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceContentId">NS Instance Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsInstance> GetNSinstanceContentAsync(string nsInstanceContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceContentId">NS Instance Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsInstance> GetNSinstanceContentAsync(string nsInstanceContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceContentId">NS Instance Content ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> DeleteNSinstanceContentAsync(string nsInstanceContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceContentId">NS Instance Content ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> DeleteNSinstanceContentAsync(string nsInstanceContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NS LCM Operation Occurrences
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsLcmOpOcc>> GetNSLCMOpOccsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS LCM Operation Occurrences
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsLcmOpOcc>> GetNSLCMOpOccsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual NS LCM Operation Occurrence
        /// </summary>
        /// <param name="nsLcmOpOccId">NS LCM Operation Occurrence ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsLcmOpOcc> GetNSLCMOpOccAsync(string nsLcmOpOccId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual NS LCM Operation Occurrence
        /// </summary>
        /// <param name="nsLcmOpOccId">NS LCM Operation Occurrence ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsLcmOpOcc> GetNSLCMOpOccAsync(string nsLcmOpOccId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple VNF Instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfInstanceInfo>> GetVnfInstancesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VNF Instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfInstanceInfo>> GetVnfInstancesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual VNF Instance
        /// </summary>
        /// <param name="vnfInstanceId">VNF Instance ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VnfInstanceInfo> GetVnfInstanceAsync(string vnfInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual VNF Instance
        /// </summary>
        /// <param name="vnfInstanceId">VNF Instance ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VnfInstanceInfo> GetVnfInstanceAsync(string vnfInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NS instance subscription
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NslcmSubscriptionInfo>> GetNsSubcriptionsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS instance subscription
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NslcmSubscriptionInfo>> GetNsSubcriptionsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new subscription for the Network service
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NslcmSubscriptionResponse> AddNsSubcriptionsAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new subscription for the Network service
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NslcmSubscriptionResponse> AddNsSubcriptionsAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read information about an individual Network Service Subscription
        /// </summary>
        /// <param name="nsSubscriptionsId">Network Service Subscription ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NslcmSubscriptionInfo> GetNsSubcriptionIdAsync(string nsSubscriptionsId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual Network Service Subscription
        /// </summary>
        /// <param name="nsSubscriptionsId">Network Service Subscription ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NslcmSubscriptionInfo> GetNsSubcriptionIdAsync(string nsSubscriptionsId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual Network Service Subscription
        /// </summary>
        /// <param name="nsSubscriptionsId">Network Service Subscription ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNsSubcriptionIdAsync(string nsSubscriptionsId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual Network Service Subscription
        /// </summary>
        /// <param name="nsSubscriptionsId">Network Service Subscription ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNsSubcriptionIdAsync(string nsSubscriptionsId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NetSlice template resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NstInfo>> GetNSTsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice template resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NstInfo>> GetNSTsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new NetSlice template resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddNSTAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NetSlice template resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddNSTAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read information about an individual NetSlice template resource
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NstInfo> GetNSTAsync(string netsliceTemplateId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual NetSlice template resource
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NstInfo> GetNSTAsync(string netsliceTemplateId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual NetSlice template resource
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSTAsync(string netsliceTemplateId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NetSlice template resource
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSTAsync(string netsliceTemplateId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch individual NetSlice Template artifact
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetNstArtifactAsync(string netsliceTemplateId, string artifactPath);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch individual NetSlice Template artifact
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetNstArtifactAsync(string netsliceTemplateId, string artifactPath, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read NST of an on-boarded NetSlice Template
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetNstNstAsync(string netsliceTemplateId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read NST of an on-boarded NetSlice Template
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetNstNstAsync(string netsliceTemplateId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch the content of a NST
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetNSTcontentAsync(string netsliceTemplateId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch the content of a NST
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetNSTcontentAsync(string netsliceTemplateId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload the content of a NST
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNSTcontentAsync(object body, string netsliceTemplateId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload the content of a NST
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNSTcontentAsync(object body, string netsliceTemplateId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload a NetSlice package by providing the content of the NetSlice package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> UploadNstContentAsync(FileParameter body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a NetSlice package by providing the content of the NetSlice package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> UploadNstContentAsync(FileParameter body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NetSlice Template resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NstInfo>> GetNstContentAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice Template resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NstInfo>> GetNstContentAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read information about an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NstInfo> GetNstIdContentAsync(string netsliceTemplateContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NstInfo> GetNstIdContentAsync(string netsliceTemplateContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNstIdContentAsync(object body, string netsliceTemplateContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateNstIdContentAsync(object body, string netsliceTemplateContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNstIdContentAsync(string netsliceTemplateContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNstIdContentAsync(string netsliceTemplateContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NetSlice instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetSliceInstance>> GetNSIsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetSliceInstance>> GetNSIsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new NetSlice instance resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddNSIAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NetSlice instance resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> AddNSIAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NetSliceInstance> GetNSIAsync(string netsliceInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NetSliceInstance> GetNSIAsync(string netsliceInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSIAsync(string netsliceInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteNSIAsync(string netsliceInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Instantiate a NetSlice
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> InstantiateNSIAsync(object body, string netsliceInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Instantiate a NetSlice
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> InstantiateNSIAsync(object body, string netsliceInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Terminate a NetSlice instance
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> TerminateNSIAsync(object body, string netsliceInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Terminate a NetSlice instance
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> TerminateNSIAsync(object body, string netsliceInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Execute an action on a NetSlice instance
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> ActionOnNSIAsync(NsiActionRequest body, string netsliceInstanceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute an action on a NetSlice instance
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> ActionOnNSIAsync(NsiActionRequest body, string netsliceInstanceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NetSlice instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetSliceInstance>> GetNSIsContentAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetSliceInstance>> GetNSIsContentAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new NetSlice instance
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateNsiContentResponse> CreateNSIContentAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NetSlice instance
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateNsiContentResponse> CreateNSIContentAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Read an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceContentId">NetSlice Instance Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NetSliceInstance> GetNSIContentAsync(string netsliceInstanceContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceContentId">NetSlice Instance Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NetSliceInstance> GetNSIContentAsync(string netsliceInstanceContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="netsliceInstanceContentId">NetSlice Instance Content ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> DeleteNSIContentAsync(string netsliceInstanceContentId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="netsliceInstanceContentId">NetSlice Instance Content ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> DeleteNSIContentAsync(string netsliceInstanceContentId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple NetSlice LCM Operation Occurrences
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsiLcmOpOcc>> GetNsiLcmOpOccsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice LCM Operation Occurrences
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsiLcmOpOcc>> GetNsiLcmOpOccsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual NetSlice LCM Operation Occurrence
        /// </summary>
        /// <param name="nsiLcmOpOccId">NetSlice LCM Operation Occurrence ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsiLcmOpOcc> GetNsiLcmOpOccAsync(string nsiLcmOpOccId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual NetSlice LCM Operation Occurrence
        /// </summary>
        /// <param name="nsiLcmOpOccId">NetSlice LCM Operation Occurrence ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsiLcmOpOcc> GetNsiLcmOpOccAsync(string nsiLcmOpOccId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual NS PM Job Report
        /// </summary>
        /// <param name="pmJobId">NS PM Job ID</param>
        /// <param name="nsId">NS ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsPmJobReportInfo> GetNsPmJobReportAsync(string pmJobId, string nsId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual NS PM Job Report
        /// </summary>
        /// <param name="pmJobId">NS PM Job ID</param>
        /// <param name="nsId">NS ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NsPmJobReportInfo> GetNsPmJobReportAsync(string pmJobId, string nsId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple PDU Descriptors
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PduInfo>> GetPDUsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple PDU Descriptors
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PduInfo>> GetPDUsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new PDU
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> CreatePDUAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new PDU
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> CreatePDUAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PduInfo> GetPDUAsync(string pduDescriptorId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PduInfo> GetPDUAsync(string pduDescriptorId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EditPDUAsync(object body, string pduDescriptorId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EditPDUAsync(object body, string pduDescriptorId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePDUAsync(string pduDescriptorId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePDUAsync(string pduDescriptorId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple Tokens
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TokenInfo>> GetTokensAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple Tokens
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TokenInfo>> GetTokensAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Request a new Token
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenInfo> CreateTokenAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request a new Token
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenInfo> CreateTokenAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete the Token indicated in the Authorization Header
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> DeleteAuthTokenAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the Token indicated in the Authorization Header
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> DeleteAuthTokenAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual Token
        /// </summary>
        /// <param name="tokenId">Token ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenInfo> GetTokenAsync(string tokenId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual Token
        /// </summary>
        /// <param name="tokenId">Token ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenInfo> GetTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete the Token indicated as parameter
        /// </summary>
        /// <param name="tokenId">Token ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> DeleteTokenAsync(string tokenId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the Token indicated as parameter
        /// </summary>
        /// <param name="tokenId">Token ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> DeleteTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple Users
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserInfo>> GetUsersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple Users
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserInfo>> GetUsersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new User
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> CreateUserAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new User
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> CreateUserAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserInfo> GetUserAsync(string userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserInfo> GetUserAsync(string userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EditUserAsync(object body, string userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EditUserAsync(object body, string userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(string userId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(string userId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple Projects
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectInfo>> GetProjectsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple Projects
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectInfo>> GetProjectsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new Project
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> CreateProjectAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Project
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> CreateProjectAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectInfo> GetProjectAsync(string projectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectInfo> GetProjectAsync(string projectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EditProjectAsync(object body, string projectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EditProjectAsync(object body, string projectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectAsync(string projectId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectAsync(string projectId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple Roles
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleInfo>> GetRolesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple Roles
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleInfo>> GetRolesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new Role
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> CreateRoleAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Role
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId> CreateRoleAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleInfo> GetRoleAsync(string roleId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleInfo> GetRoleAsync(string roleId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EditRoleAsync(object body, string roleId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EditRoleAsync(object body, string roleId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRoleAsync(string roleId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRoleAsync(string roleId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple VIMs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VimInfo>> GetVIMsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VIMs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VimInfo>> GetVIMsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new VIM
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVIMAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new VIM
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVIMAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VimInfo> GetVIMAsync(System.Guid vimId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VimInfo> GetVIMAsync(System.Guid vimId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditVIMAsync(object body, System.Guid vimId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditVIMAsync(object body, System.Guid vimId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVIMAsync(System.Guid vimId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVIMAsync(System.Guid vimId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple VIM Accounts
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VimInfo>> GetVimAccountsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VIM Accounts
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VimInfo>> GetVimAccountsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new VIM Account
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVimAccountAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new VIM Account
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVimAccountAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VimInfo> GetVimAccountAsync(System.Guid vimAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VimInfo> GetVimAccountAsync(System.Guid vimAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditVimAccountAsync(object body, System.Guid vimAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditVimAccountAsync(object body, System.Guid vimAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVimAccountAsync(System.Guid vimAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVimAccountAsync(System.Guid vimAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple WIM Accounts
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WimInfo>> GetWimAccountsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple WIM Accounts
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WimInfo>> GetWimAccountsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new WIM Account
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateWimAccountAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new WIM Account
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateWimAccountAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WimInfo> GetWimAccountAsync(System.Guid wimAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WimInfo> GetWimAccountAsync(System.Guid wimAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditWimAccountAsync(object body, System.Guid wimAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditWimAccountAsync(object body, System.Guid wimAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWimAccountAsync(System.Guid wimAccountId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWimAccountAsync(System.Guid wimAccountId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple SDNs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SdnInfo>> GetSDNsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple SDNs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SdnInfo>> GetSDNsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new SDN
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateSDNAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new SDN
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateSDNAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SdnInfo> GetSDNAsync(System.Guid sdnId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SdnInfo> GetSDNAsync(System.Guid sdnId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditSDNAsync(object body, System.Guid sdnId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditSDNAsync(object body, System.Guid sdnId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSDNAsync(System.Guid sdnId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSDNAsync(System.Guid sdnId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple K8s Clusters
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<K8sClusterInfo>> GetK8sClustersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple K8s Clusters
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<K8sClusterInfo>> GetK8sClustersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new K8s Cluster
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateK8sClusterAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new K8s Cluster
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateK8sClusterAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<K8sClusterInfo> GetK8sClusterAsync(System.Guid k8sClusterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<K8sClusterInfo> GetK8sClusterAsync(System.Guid k8sClusterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditK8sClusterAsync(object body, System.Guid k8sClusterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditK8sClusterAsync(object body, System.Guid k8sClusterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteK8sClusterAsync(System.Guid k8sClusterId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteK8sClusterAsync(System.Guid k8sClusterId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple VCAs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VcaInfo>> GetVcasAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VCAs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VcaInfo>> GetVcasAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new VCA
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVcaAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new VCA
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVcaAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcaInfo> GetVcaAsync(System.Guid vcaId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VcaInfo> GetVcaAsync(System.Guid vcaId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Modify a VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditVcaAsync(object body, System.Guid vcaId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OpId> EditVcaAsync(object body, System.Guid vcaId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcaAsync(System.Guid vcaId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVcaAsync(System.Guid vcaId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about multiple K8s Repos
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<K8sRepoInfo>> GetK8sReposAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple K8s Repos
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<K8sRepoInfo>> GetK8sReposAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create a new K8s Repo
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateK8sRepoAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new K8s Repo
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateK8sRepoAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Query information about an individual K8s Repo
        /// </summary>
        /// <param name="k8sRepoId">K8s Repo ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<K8sRepoInfo> GetK8sRepoAsync(System.Guid k8sRepoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual K8s Repo
        /// </summary>
        /// <param name="k8sRepoId">K8s Repo ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<K8sRepoInfo> GetK8sRepoAsync(System.Guid k8sRepoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete a K8s Repo
        /// </summary>
        /// <param name="k8sRepoId">K8s Repo ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteK8sRepoAsync(System.Guid k8sRepoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a K8s Repo
        /// </summary>
        /// <param name="k8sRepoId">K8s Repo ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteK8sRepoAsync(System.Guid k8sRepoId, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsmClient : IOsmClient
    {
        private string _baseUrl = "https://osm.etsi.org/nbapi/v1.0.0";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public OsmClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Query information about multiple NS descriptor resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsdInfo>> GetNSDsAsync()
        {
            return GetNSDsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS descriptor resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsdInfo>> GetNSDsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NsdInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new NS descriptor resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> AddNSDAsync(object body)
        {
            return AddNSDAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NS descriptor resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> AddNSDAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read information about an individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NsdInfo> GetNSDAsync(string nsdInfoId)
        {
            return GetNSDAsync(nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NsdInfo> GetNSDAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors/{nsdInfoId}");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NsdInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteNSDAsync(string nsdInfoId)
        {
            return DeleteNSDAsync(nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteNSDAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors/{nsdInfoId}");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify the data of an  individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateNSDAsync(object body, string nsdInfoId)
        {
            return UpdateNSDAsync(body, nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify the data of an  individual NS descriptor resource
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateNSDAsync(object body, string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors/{nsdInfoId}");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch the content of a NSD
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetNSDcontentAsync(string nsdInfoId)
        {
            return GetNSDcontentAsync(nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch the content of a NSD
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetNSDcontentAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/zip"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload the content of a NSD
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateNSDcontentAsync(object body, string nsdInfoId)
        {
            return UpdateNSDcontentAsync(body, nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload the content of a NSD
        /// </summary>
        /// <param name="nsdInfoId">NSD Info ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateNSDcontentAsync(object body, string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors/{nsdInfoId}/nsd_content");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch individual NS package artifact
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetNsPkgArtifactAsync(string nsdInfoId, string artifactPath)
        {
            return GetNsPkgArtifactAsync(nsdInfoId, artifactPath, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch individual NS package artifact
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetNsPkgArtifactAsync(string nsdInfoId, string artifactPath, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            if (artifactPath == null)
                throw new System.ArgumentNullException("artifactPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors/{nsdInfoId}/artifacts/{artifactPath}");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{artifactPath}", System.Uri.EscapeDataString(ConvertToString(artifactPath, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read NSD of an on-boarded NS package
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetNsPkgNsdAsync(string nsdInfoId)
        {
            return GetNsPkgNsdAsync(nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read NSD of an on-boarded NS package
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetNsPkgNsdAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors/{nsdInfoId}/nsd");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            return result_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload a NS package by providing the content of the NS package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> UploadNsPkgsContentAsync(FileParameter body)
        {
            return UploadNsPkgsContentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a NS package by providing the content of the NS package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> UploadNsPkgsContentAsync(FileParameter body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/zip");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OsmApiException("Accepted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OsmApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NS package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsdInfo>> GetNsPkgsContentAsync()
        {
            return GetNsPkgsContentAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsdInfo>> GetNsPkgsContentAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NsdInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<FileResponse>("Partial Content", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read information about an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NsdInfo> GetNsPkgsIdContentAsync(string nsdInfoId)
        {
            return GetNsPkgsIdContentAsync(nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NsdInfo> GetNsPkgsIdContentAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors_content/{nsdInfoId}");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NsdInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateNsPkgsIdContentAsync(object body, string nsdInfoId)
        {
            return UpdateNsPkgsIdContentAsync(body, nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateNsPkgsIdContentAsync(object body, string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors_content/{nsdInfoId}");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteNSPkgsIdContentAsync(string nsdInfoId)
        {
            return DeleteNSPkgsIdContentAsync(nsdInfoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS package resource
        /// </summary>
        /// <param name="nsdInfoId">NS Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteNSPkgsIdContentAsync(string nsdInfoId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsdInfoId == null)
                throw new System.ArgumentNullException("nsdInfoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsd/v1/ns_descriptors_content/{nsdInfoId}");
            urlBuilder_.Replace("{nsdInfoId}", System.Uri.EscapeDataString(ConvertToString(nsdInfoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple VNF package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfPkgInfo>> GetVnfPkgsAsync()
        {
            return GetVnfPkgsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VNF package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfPkgInfo>> GetVnfPkgsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VnfPkgInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new VNF package resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> AddVnfPkgAsync(object body)
        {
            return AddVnfPkgAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new VNF package resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> AddVnfPkgAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read information about an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VnfPkgInfo> GetVnfPkgAsync(string vnfPkgId)
        {
            return GetVnfPkgAsync(vnfPkgId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VnfPkgInfo> GetVnfPkgAsync(string vnfPkgId, System.Threading.CancellationToken cancellationToken)
        {
            if (vnfPkgId == null)
                throw new System.ArgumentNullException("vnfPkgId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages/{vnfPkgId}");
            urlBuilder_.Replace("{vnfPkgId}", System.Uri.EscapeDataString(ConvertToString(vnfPkgId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VnfPkgInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteVnfPkgAsync(string vnfPkgId)
        {
            return DeleteVnfPkgAsync(vnfPkgId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteVnfPkgAsync(string vnfPkgId, System.Threading.CancellationToken cancellationToken)
        {
            if (vnfPkgId == null)
                throw new System.ArgumentNullException("vnfPkgId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages/{vnfPkgId}");
            urlBuilder_.Replace("{vnfPkgId}", System.Uri.EscapeDataString(ConvertToString(vnfPkgId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateVnfPkgAsync(object body, string vnfPkgId)
        {
            return UpdateVnfPkgAsync(body, vnfPkgId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual VNF package resource
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateVnfPkgAsync(object body, string vnfPkgId, System.Threading.CancellationToken cancellationToken)
        {
            if (vnfPkgId == null)
                throw new System.ArgumentNullException("vnfPkgId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages/{vnfPkgId}");
            urlBuilder_.Replace("{vnfPkgId}", System.Uri.EscapeDataString(ConvertToString(vnfPkgId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read VNFD of an on-boarded VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetVnfPkgVnfdAsync(string vnfPkgId)
        {
            return GetVnfPkgVnfdAsync(vnfPkgId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read VNFD of an on-boarded VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetVnfPkgVnfdAsync(string vnfPkgId, System.Threading.CancellationToken cancellationToken)
        {
            if (vnfPkgId == null)
                throw new System.ArgumentNullException("vnfPkgId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages/{vnfPkgId}/vnfd");
            urlBuilder_.Replace("{vnfPkgId}", System.Uri.EscapeDataString(ConvertToString(vnfPkgId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            return result_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch an on-boarded VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetVnfPkgContentAsync(string vnfPkgId)
        {
            return GetVnfPkgContentAsync(vnfPkgId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch an on-boarded VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetVnfPkgContentAsync(string vnfPkgId, System.Threading.CancellationToken cancellationToken)
        {
            if (vnfPkgId == null)
                throw new System.ArgumentNullException("vnfPkgId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content");
            urlBuilder_.Replace("{vnfPkgId}", System.Uri.EscapeDataString(ConvertToString(vnfPkgId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/zip"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload a VNF package by providing the content of the VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UploadVnfPkgContentAsync(FileParameter body, string vnfPkgId)
        {
            return UploadVnfPkgContentAsync(body, vnfPkgId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a VNF package by providing the content of the VNF package
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UploadVnfPkgContentAsync(FileParameter body, string vnfPkgId, System.Threading.CancellationToken cancellationToken)
        {
            if (vnfPkgId == null)
                throw new System.ArgumentNullException("vnfPkgId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages/{vnfPkgId}/package_content");
            urlBuilder_.Replace("{vnfPkgId}", System.Uri.EscapeDataString(ConvertToString(vnfPkgId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/zip");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch individual VNF package artifact
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetVnfPkgArtifactAsync(string vnfPkgId, string artifactPath)
        {
            return GetVnfPkgArtifactAsync(vnfPkgId, artifactPath, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch individual VNF package artifact
        /// </summary>
        /// <param name="vnfPkgId">VNF Package ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetVnfPkgArtifactAsync(string vnfPkgId, string artifactPath, System.Threading.CancellationToken cancellationToken)
        {
            if (vnfPkgId == null)
                throw new System.ArgumentNullException("vnfPkgId");

            if (artifactPath == null)
                throw new System.ArgumentNullException("artifactPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages/{vnfPkgId}/artifacts/{artifactPath}");
            urlBuilder_.Replace("{vnfPkgId}", System.Uri.EscapeDataString(ConvertToString(vnfPkgId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{artifactPath}", System.Uri.EscapeDataString(ConvertToString(artifactPath, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload a VNF package by providing the content of the VNF package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> UploadVnfPkgsContentAsync(FileParameter body)
        {
            return UploadVnfPkgsContentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a VNF package by providing the content of the VNF package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> UploadVnfPkgsContentAsync(FileParameter body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/zip");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OsmApiException("Accepted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OsmApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple VNF package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfPkgInfo>> GetVnfPkgsContentAsync()
        {
            return GetVnfPkgsContentAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VNF package resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfPkgInfo>> GetVnfPkgsContentAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VnfPkgInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<FileResponse>("Partial Content", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read information about an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VnfPkgInfo> GetVnfPkgsIdContentAsync(string packageContentId)
        {
            return GetVnfPkgsIdContentAsync(packageContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VnfPkgInfo> GetVnfPkgsIdContentAsync(string packageContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (packageContentId == null)
                throw new System.ArgumentNullException("packageContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages_content/{packageContentId}");
            urlBuilder_.Replace("{packageContentId}", System.Uri.EscapeDataString(ConvertToString(packageContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VnfPkgInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateVnfPkgsIdContentAsync(object body, string packageContentId)
        {
            return UpdateVnfPkgsIdContentAsync(body, packageContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateVnfPkgsIdContentAsync(object body, string packageContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (packageContentId == null)
                throw new System.ArgumentNullException("packageContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages_content/{packageContentId}");
            urlBuilder_.Replace("{packageContentId}", System.Uri.EscapeDataString(ConvertToString(packageContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteVnfPkgsIdContentAsync(string packageContentId)
        {
            return DeleteVnfPkgsIdContentAsync(packageContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual VNF package resource
        /// </summary>
        /// <param name="packageContentId">VNF Package Content ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteVnfPkgsIdContentAsync(string packageContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (packageContentId == null)
                throw new System.ArgumentNullException("packageContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/vnfpkgm/v1/vnf_packages_content/{packageContentId}");
            urlBuilder_.Replace("{packageContentId}", System.Uri.EscapeDataString(ConvertToString(packageContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NS instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsInstance>> GetNSinstancesAsync()
        {
            return GetNSinstancesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsInstance>> GetNSinstancesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NsInstance>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new NS instance resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> AddNSinstanceAsync(object body)
        {
            return AddNSinstanceAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NS instance resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> AddNSinstanceAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <param name="vcaStatusRefresh">Set to true if vca status needs to be refreshed.</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NsInstance> GetNSinstanceAsync(string nsInstanceId, bool? vcaStatusRefresh)
        {
            return GetNSinstanceAsync(nsInstanceId, vcaStatusRefresh, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <param name="vcaStatusRefresh">Set to true if vca status needs to be refreshed.</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NsInstance> GetNSinstanceAsync(string nsInstanceId, bool? vcaStatusRefresh, System.Threading.CancellationToken cancellationToken)
        {
            if (nsInstanceId == null)
                throw new System.ArgumentNullException("nsInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances/{nsInstanceId}?");
            urlBuilder_.Replace("{nsInstanceId}", System.Uri.EscapeDataString(ConvertToString(nsInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (vcaStatusRefresh != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vcaStatusRefresh") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vcaStatusRefresh, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NsInstance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <param name="vcaStatusRefresh">Set to true if vca status needs to be refreshed.</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteNSinstanceAsync(string nsInstanceId, bool? vcaStatusRefresh)
        {
            return DeleteNSinstanceAsync(nsInstanceId, vcaStatusRefresh, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <param name="vcaStatusRefresh">Set to true if vca status needs to be refreshed.</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteNSinstanceAsync(string nsInstanceId, bool? vcaStatusRefresh, System.Threading.CancellationToken cancellationToken)
        {
            if (nsInstanceId == null)
                throw new System.ArgumentNullException("nsInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances/{nsInstanceId}?");
            urlBuilder_.Replace("{nsInstanceId}", System.Uri.EscapeDataString(ConvertToString(nsInstanceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (vcaStatusRefresh != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("vcaStatusRefresh") + "=").Append(System.Uri.EscapeDataString(ConvertToString(vcaStatusRefresh, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Instantiate a NS
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> InstantiateNSinstanceAsync(object body, string nsInstanceId)
        {
            return InstantiateNSinstanceAsync(body, nsInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Instantiate a NS
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> InstantiateNSinstanceAsync(object body, string nsInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsInstanceId == null)
                throw new System.ArgumentNullException("nsInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances/{nsInstanceId}/instantiate");
            urlBuilder_.Replace("{nsInstanceId}", System.Uri.EscapeDataString(ConvertToString(nsInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Scale a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task ScaleNSinstanceAsync(object body, string nsInstanceId)
        {
            return ScaleNSinstanceAsync(body, nsInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Scale a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ScaleNSinstanceAsync(object body, string nsInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsInstanceId == null)
                throw new System.ArgumentNullException("nsInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances/{nsInstanceId}/scale");
            urlBuilder_.Replace("{nsInstanceId}", System.Uri.EscapeDataString(ConvertToString(nsInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Terminate a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> TerminateNSinstanceAsync(object body, string nsInstanceId)
        {
            return TerminateNSinstanceAsync(body, nsInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Terminate a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> TerminateNSinstanceAsync(object body, string nsInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsInstanceId == null)
                throw new System.ArgumentNullException("nsInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances/{nsInstanceId}/terminate");
            urlBuilder_.Replace("{nsInstanceId}", System.Uri.EscapeDataString(ConvertToString(nsInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Execute an action on a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> ActionOnNSinstanceAsync(NSinstanceActionRequest body, string nsInstanceId)
        {
            return ActionOnNSinstanceAsync(body, nsInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute an action on a NS instance
        /// </summary>
        /// <param name="nsInstanceId">NS Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> ActionOnNSinstanceAsync(NSinstanceActionRequest body, string nsInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsInstanceId == null)
                throw new System.ArgumentNullException("nsInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances/{nsInstanceId}/action");
            urlBuilder_.Replace("{nsInstanceId}", System.Uri.EscapeDataString(ConvertToString(nsInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NS instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsInstance>> GetNSinstancesContentAsync()
        {
            return GetNSinstancesContentAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsInstance>> GetNSinstancesContentAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NsInstance>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new NS instance
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateNSinstanceContentResponse> CreateNSinstanceContentAsync(object body)
        {
            return CreateNSinstanceContentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NS instance
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateNSinstanceContentResponse> CreateNSinstanceContentAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateNSinstanceContentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceContentId">NS Instance Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NsInstance> GetNSinstanceContentAsync(string nsInstanceContentId)
        {
            return GetNSinstanceContentAsync(nsInstanceContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceContentId">NS Instance Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NsInstance> GetNSinstanceContentAsync(string nsInstanceContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsInstanceContentId == null)
                throw new System.ArgumentNullException("nsInstanceContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances_content/{nsInstanceContentId}");
            urlBuilder_.Replace("{nsInstanceContentId}", System.Uri.EscapeDataString(ConvertToString(nsInstanceContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NsInstance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceContentId">NS Instance Content ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> DeleteNSinstanceContentAsync(string nsInstanceContentId)
        {
            return DeleteNSinstanceContentAsync(nsInstanceContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="nsInstanceContentId">NS Instance Content ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> DeleteNSinstanceContentAsync(string nsInstanceContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsInstanceContentId == null)
                throw new System.ArgumentNullException("nsInstanceContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_instances_content/{nsInstanceContentId}");
            urlBuilder_.Replace("{nsInstanceContentId}", System.Uri.EscapeDataString(ConvertToString(nsInstanceContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OsmApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NS LCM Operation Occurrences
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsLcmOpOcc>> GetNSLCMOpOccsAsync()
        {
            return GetNSLCMOpOccsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS LCM Operation Occurrences
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsLcmOpOcc>> GetNSLCMOpOccsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_lcm_op_occs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NsLcmOpOcc>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual NS LCM Operation Occurrence
        /// </summary>
        /// <param name="nsLcmOpOccId">NS LCM Operation Occurrence ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NsLcmOpOcc> GetNSLCMOpOccAsync(string nsLcmOpOccId)
        {
            return GetNSLCMOpOccAsync(nsLcmOpOccId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual NS LCM Operation Occurrence
        /// </summary>
        /// <param name="nsLcmOpOccId">NS LCM Operation Occurrence ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NsLcmOpOcc> GetNSLCMOpOccAsync(string nsLcmOpOccId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsLcmOpOccId == null)
                throw new System.ArgumentNullException("nsLcmOpOccId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/ns_lcm_op_occs/{nsLcmOpOccId}");
            urlBuilder_.Replace("{nsLcmOpOccId}", System.Uri.EscapeDataString(ConvertToString(nsLcmOpOccId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NsLcmOpOcc>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple VNF Instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfInstanceInfo>> GetVnfInstancesAsync()
        {
            return GetVnfInstancesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VNF Instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VnfInstanceInfo>> GetVnfInstancesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/vnf_instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VnfInstanceInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual VNF Instance
        /// </summary>
        /// <param name="vnfInstanceId">VNF Instance ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VnfInstanceInfo> GetVnfInstanceAsync(string vnfInstanceId)
        {
            return GetVnfInstanceAsync(vnfInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual VNF Instance
        /// </summary>
        /// <param name="vnfInstanceId">VNF Instance ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VnfInstanceInfo> GetVnfInstanceAsync(string vnfInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (vnfInstanceId == null)
                throw new System.ArgumentNullException("vnfInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/vnf_instances/{vnfInstanceId}");
            urlBuilder_.Replace("{vnfInstanceId}", System.Uri.EscapeDataString(ConvertToString(vnfInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VnfInstanceInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NS instance subscription
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NslcmSubscriptionInfo>> GetNsSubcriptionsAsync()
        {
            return GetNsSubcriptionsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NS instance subscription
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NslcmSubscriptionInfo>> GetNsSubcriptionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/subscriptions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NslcmSubscriptionInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new subscription for the Network service
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NslcmSubscriptionResponse> AddNsSubcriptionsAsync(object body)
        {
            return AddNsSubcriptionsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new subscription for the Network service
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NslcmSubscriptionResponse> AddNsSubcriptionsAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/subscriptions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NslcmSubscriptionResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read information about an individual Network Service Subscription
        /// </summary>
        /// <param name="nsSubscriptionsId">Network Service Subscription ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NslcmSubscriptionInfo> GetNsSubcriptionIdAsync(string nsSubscriptionsId)
        {
            return GetNsSubcriptionIdAsync(nsSubscriptionsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual Network Service Subscription
        /// </summary>
        /// <param name="nsSubscriptionsId">Network Service Subscription ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NslcmSubscriptionInfo> GetNsSubcriptionIdAsync(string nsSubscriptionsId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsSubscriptionsId == null)
                throw new System.ArgumentNullException("nsSubscriptionsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/subscriptions/{nsSubscriptionsId}");
            urlBuilder_.Replace("{nsSubscriptionsId}", System.Uri.EscapeDataString(ConvertToString(nsSubscriptionsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NslcmSubscriptionInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual Network Service Subscription
        /// </summary>
        /// <param name="nsSubscriptionsId">Network Service Subscription ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteNsSubcriptionIdAsync(string nsSubscriptionsId)
        {
            return DeleteNsSubcriptionIdAsync(nsSubscriptionsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual Network Service Subscription
        /// </summary>
        /// <param name="nsSubscriptionsId">Network Service Subscription ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteNsSubcriptionIdAsync(string nsSubscriptionsId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsSubscriptionsId == null)
                throw new System.ArgumentNullException("nsSubscriptionsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nslcm/v1/subscriptions/{nsSubscriptionsId}");
            urlBuilder_.Replace("{nsSubscriptionsId}", System.Uri.EscapeDataString(ConvertToString(nsSubscriptionsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NetSlice template resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NstInfo>> GetNSTsAsync()
        {
            return GetNSTsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice template resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NstInfo>> GetNSTsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NstInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new NetSlice template resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> AddNSTAsync(object body)
        {
            return AddNSTAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NetSlice template resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> AddNSTAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read information about an individual NetSlice template resource
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NstInfo> GetNSTAsync(string netsliceTemplateId)
        {
            return GetNSTAsync(netsliceTemplateId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual NetSlice template resource
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NstInfo> GetNSTAsync(string netsliceTemplateId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateId == null)
                throw new System.ArgumentNullException("netsliceTemplateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates/{netsliceTemplateId}");
            urlBuilder_.Replace("{netsliceTemplateId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NstInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual NetSlice template resource
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteNSTAsync(string netsliceTemplateId)
        {
            return DeleteNSTAsync(netsliceTemplateId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NetSlice template resource
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteNSTAsync(string netsliceTemplateId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateId == null)
                throw new System.ArgumentNullException("netsliceTemplateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates/{netsliceTemplateId}");
            urlBuilder_.Replace("{netsliceTemplateId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch individual NetSlice Template artifact
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetNstArtifactAsync(string netsliceTemplateId, string artifactPath)
        {
            return GetNstArtifactAsync(netsliceTemplateId, artifactPath, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch individual NetSlice Template artifact
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <param name="artifactPath">Artifact Path</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetNstArtifactAsync(string netsliceTemplateId, string artifactPath, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateId == null)
                throw new System.ArgumentNullException("netsliceTemplateId");

            if (artifactPath == null)
                throw new System.ArgumentNullException("artifactPath");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates/{netsliceTemplateId}/artifacts/{artifactPath}");
            urlBuilder_.Replace("{netsliceTemplateId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{artifactPath}", System.Uri.EscapeDataString(ConvertToString(artifactPath, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read NST of an on-boarded NetSlice Template
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> GetNstNstAsync(string netsliceTemplateId)
        {
            return GetNstNstAsync(netsliceTemplateId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read NST of an on-boarded NetSlice Template
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> GetNstNstAsync(string netsliceTemplateId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateId == null)
                throw new System.ArgumentNullException("netsliceTemplateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates/{netsliceTemplateId}/nst");
            urlBuilder_.Replace("{netsliceTemplateId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = (string)System.Convert.ChangeType(responseData_, typeof(string));
                            return result_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Fetch the content of a NST
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetNSTcontentAsync(string netsliceTemplateId)
        {
            return GetNSTcontentAsync(netsliceTemplateId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch the content of a NST
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetNSTcontentAsync(string netsliceTemplateId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateId == null)
                throw new System.ArgumentNullException("netsliceTemplateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates/{netsliceTemplateId}/nst_content");
            urlBuilder_.Replace("{netsliceTemplateId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/zip"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload the content of a NST
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateNSTcontentAsync(object body, string netsliceTemplateId)
        {
            return UpdateNSTcontentAsync(body, netsliceTemplateId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload the content of a NST
        /// </summary>
        /// <param name="netsliceTemplateId">NetSlice Template ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateNSTcontentAsync(object body, string netsliceTemplateId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateId == null)
                throw new System.ArgumentNullException("netsliceTemplateId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates/{netsliceTemplateId}/nst_content");
            urlBuilder_.Replace("{netsliceTemplateId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload a NetSlice package by providing the content of the NetSlice package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> UploadNstContentAsync(FileParameter body)
        {
            return UploadNstContentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a NetSlice package by providing the content of the NetSlice package
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> UploadNstContentAsync(FileParameter body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/zip");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OsmApiException("Accepted", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OsmApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NetSlice Template resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NstInfo>> GetNstContentAsync()
        {
            return GetNstContentAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice Template resources
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NstInfo>> GetNstContentAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NstInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<FileResponse>("Partial Content", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read information about an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NstInfo> GetNstIdContentAsync(string netsliceTemplateContentId)
        {
            return GetNstIdContentAsync(netsliceTemplateContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read information about an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NstInfo> GetNstIdContentAsync(string netsliceTemplateContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateContentId == null)
                throw new System.ArgumentNullException("netsliceTemplateContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates_content/{netsliceTemplateContentId}");
            urlBuilder_.Replace("{netsliceTemplateContentId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NstInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateNstIdContentAsync(object body, string netsliceTemplateContentId)
        {
            return UpdateNstIdContentAsync(body, netsliceTemplateContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateNstIdContentAsync(object body, string netsliceTemplateContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateContentId == null)
                throw new System.ArgumentNullException("netsliceTemplateContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates_content/{netsliceTemplateContentId}");
            urlBuilder_.Replace("{netsliceTemplateContentId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteNstIdContentAsync(string netsliceTemplateContentId)
        {
            return DeleteNstIdContentAsync(netsliceTemplateContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NetSlice Template resource
        /// </summary>
        /// <param name="netsliceTemplateContentId">NetSlice Template ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteNstIdContentAsync(string netsliceTemplateContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceTemplateContentId == null)
                throw new System.ArgumentNullException("netsliceTemplateContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nst/v1/netslice_templates_content/{netsliceTemplateContentId}");
            urlBuilder_.Replace("{netsliceTemplateContentId}", System.Uri.EscapeDataString(ConvertToString(netsliceTemplateContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NetSlice instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetSliceInstance>> GetNSIsAsync()
        {
            return GetNSIsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetSliceInstance>> GetNSIsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NetSliceInstance>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new NetSlice instance resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> AddNSIAsync(object body)
        {
            return AddNSIAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NetSlice instance resource
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> AddNSIAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NetSliceInstance> GetNSIAsync(string netsliceInstanceId)
        {
            return GetNSIAsync(netsliceInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NetSliceInstance> GetNSIAsync(string netsliceInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceInstanceId == null)
                throw new System.ArgumentNullException("netsliceInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances/{netsliceInstanceId}");
            urlBuilder_.Replace("{netsliceInstanceId}", System.Uri.EscapeDataString(ConvertToString(netsliceInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NetSliceInstance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteNSIAsync(string netsliceInstanceId)
        {
            return DeleteNSIAsync(netsliceInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteNSIAsync(string netsliceInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceInstanceId == null)
                throw new System.ArgumentNullException("netsliceInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances/{netsliceInstanceId}");
            urlBuilder_.Replace("{netsliceInstanceId}", System.Uri.EscapeDataString(ConvertToString(netsliceInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Instantiate a NetSlice
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> InstantiateNSIAsync(object body, string netsliceInstanceId)
        {
            return InstantiateNSIAsync(body, netsliceInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Instantiate a NetSlice
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> InstantiateNSIAsync(object body, string netsliceInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceInstanceId == null)
                throw new System.ArgumentNullException("netsliceInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances/{netsliceInstanceId}/instantiate");
            urlBuilder_.Replace("{netsliceInstanceId}", System.Uri.EscapeDataString(ConvertToString(netsliceInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Terminate a NetSlice instance
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> TerminateNSIAsync(object body, string netsliceInstanceId)
        {
            return TerminateNSIAsync(body, netsliceInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Terminate a NetSlice instance
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> TerminateNSIAsync(object body, string netsliceInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceInstanceId == null)
                throw new System.ArgumentNullException("netsliceInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances/{netsliceInstanceId}/terminate");
            urlBuilder_.Replace("{netsliceInstanceId}", System.Uri.EscapeDataString(ConvertToString(netsliceInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Execute an action on a NetSlice instance
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> ActionOnNSIAsync(NsiActionRequest body, string netsliceInstanceId)
        {
            return ActionOnNSIAsync(body, netsliceInstanceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Execute an action on a NetSlice instance
        /// </summary>
        /// <param name="netsliceInstanceId">NetSlice Instance ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> ActionOnNSIAsync(NsiActionRequest body, string netsliceInstanceId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceInstanceId == null)
                throw new System.ArgumentNullException("netsliceInstanceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances/{netsliceInstanceId}/action");
            urlBuilder_.Replace("{netsliceInstanceId}", System.Uri.EscapeDataString(ConvertToString(netsliceInstanceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NetSlice instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetSliceInstance>> GetNSIsContentAsync()
        {
            return GetNSIsContentAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice instances
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NetSliceInstance>> GetNSIsContentAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NetSliceInstance>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new NetSlice instance
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateNsiContentResponse> CreateNSIContentAsync(object body)
        {
            return CreateNSIContentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new NetSlice instance
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateNsiContentResponse> CreateNSIContentAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances_content");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateNsiContentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Read an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceContentId">NetSlice Instance Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NetSliceInstance> GetNSIContentAsync(string netsliceInstanceContentId)
        {
            return GetNSIContentAsync(netsliceInstanceContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Read an individual NetSlice instance resource
        /// </summary>
        /// <param name="netsliceInstanceContentId">NetSlice Instance Content ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NetSliceInstance> GetNSIContentAsync(string netsliceInstanceContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceInstanceContentId == null)
                throw new System.ArgumentNullException("netsliceInstanceContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances_content/{netsliceInstanceContentId}");
            urlBuilder_.Replace("{netsliceInstanceContentId}", System.Uri.EscapeDataString(ConvertToString(netsliceInstanceContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NetSliceInstance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="netsliceInstanceContentId">NetSlice Instance Content ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> DeleteNSIContentAsync(string netsliceInstanceContentId)
        {
            return DeleteNSIContentAsync(netsliceInstanceContentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual NS instance resource
        /// </summary>
        /// <param name="netsliceInstanceContentId">NetSlice Instance Content ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> DeleteNSIContentAsync(string netsliceInstanceContentId, System.Threading.CancellationToken cancellationToken)
        {
            if (netsliceInstanceContentId == null)
                throw new System.ArgumentNullException("netsliceInstanceContentId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/netslice_instances_content/{netsliceInstanceContentId}");
            urlBuilder_.Replace("{netsliceInstanceContentId}", System.Uri.EscapeDataString(ConvertToString(netsliceInstanceContentId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new OsmApiException("No Content", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple NetSlice LCM Operation Occurrences
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsiLcmOpOcc>> GetNsiLcmOpOccsAsync()
        {
            return GetNsiLcmOpOccsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple NetSlice LCM Operation Occurrences
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NsiLcmOpOcc>> GetNsiLcmOpOccsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/nsi_lcm_op_occs");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<NsiLcmOpOcc>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual NetSlice LCM Operation Occurrence
        /// </summary>
        /// <param name="nsiLcmOpOccId">NetSlice LCM Operation Occurrence ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NsiLcmOpOcc> GetNsiLcmOpOccAsync(string nsiLcmOpOccId)
        {
            return GetNsiLcmOpOccAsync(nsiLcmOpOccId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual NetSlice LCM Operation Occurrence
        /// </summary>
        /// <param name="nsiLcmOpOccId">NetSlice LCM Operation Occurrence ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NsiLcmOpOcc> GetNsiLcmOpOccAsync(string nsiLcmOpOccId, System.Threading.CancellationToken cancellationToken)
        {
            if (nsiLcmOpOccId == null)
                throw new System.ArgumentNullException("nsiLcmOpOccId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nsilcm/v1/nsi_lcm_op_occs/{nsiLcmOpOccId}");
            urlBuilder_.Replace("{nsiLcmOpOccId}", System.Uri.EscapeDataString(ConvertToString(nsiLcmOpOccId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NsiLcmOpOcc>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual NS PM Job Report
        /// </summary>
        /// <param name="pmJobId">NS PM Job ID</param>
        /// <param name="nsId">NS ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NsPmJobReportInfo> GetNsPmJobReportAsync(string pmJobId, string nsId)
        {
            return GetNsPmJobReportAsync(pmJobId, nsId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual NS PM Job Report
        /// </summary>
        /// <param name="pmJobId">NS PM Job ID</param>
        /// <param name="nsId">NS ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NsPmJobReportInfo> GetNsPmJobReportAsync(string pmJobId, string nsId, System.Threading.CancellationToken cancellationToken)
        {
            if (pmJobId == null)
                throw new System.ArgumentNullException("pmJobId");

            if (nsId == null)
                throw new System.ArgumentNullException("nsId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/nspm/v1/pm_jobs/{pmJobId}/reports/{nsId}");
            urlBuilder_.Replace("{pmJobId}", System.Uri.EscapeDataString(ConvertToString(pmJobId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{nsId}", System.Uri.EscapeDataString(ConvertToString(nsId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NsPmJobReportInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple PDU Descriptors
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PduInfo>> GetPDUsAsync()
        {
            return GetPDUsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple PDU Descriptors
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PduInfo>> GetPDUsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pdu/v1/pdu_descriptors");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PduInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new PDU
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> CreatePDUAsync(object body)
        {
            return CreatePDUAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new PDU
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> CreatePDUAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pdu/v1/pdu_descriptors");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PduInfo> GetPDUAsync(string pduDescriptorId)
        {
            return GetPDUAsync(pduDescriptorId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PduInfo> GetPDUAsync(string pduDescriptorId, System.Threading.CancellationToken cancellationToken)
        {
            if (pduDescriptorId == null)
                throw new System.ArgumentNullException("pduDescriptorId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pdu/v1/pdu_descriptors/{pduDescriptorId}");
            urlBuilder_.Replace("{pduDescriptorId}", System.Uri.EscapeDataString(ConvertToString(pduDescriptorId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PduInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task EditPDUAsync(object body, string pduDescriptorId)
        {
            return EditPDUAsync(body, pduDescriptorId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task EditPDUAsync(object body, string pduDescriptorId, System.Threading.CancellationToken cancellationToken)
        {
            if (pduDescriptorId == null)
                throw new System.ArgumentNullException("pduDescriptorId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pdu/v1/pdu_descriptors/{pduDescriptorId}");
            urlBuilder_.Replace("{pduDescriptorId}", System.Uri.EscapeDataString(ConvertToString(pduDescriptorId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeletePDUAsync(string pduDescriptorId)
        {
            return DeletePDUAsync(pduDescriptorId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an individual PDU Descriptor
        /// </summary>
        /// <param name="pduDescriptorId">PDU Descriptor ID</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePDUAsync(string pduDescriptorId, System.Threading.CancellationToken cancellationToken)
        {
            if (pduDescriptorId == null)
                throw new System.ArgumentNullException("pduDescriptorId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pdu/v1/pdu_descriptors/{pduDescriptorId}");
            urlBuilder_.Replace("{pduDescriptorId}", System.Uri.EscapeDataString(ConvertToString(pduDescriptorId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple Tokens
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TokenInfo>> GetTokensAsync()
        {
            return GetTokensAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple Tokens
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TokenInfo>> GetTokensAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/tokens");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TokenInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Request a new Token
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenInfo> CreateTokenAsync(object body)
        {
            return CreateTokenAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Request a new Token
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenInfo> CreateTokenAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/tokens");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the Token indicated in the Authorization Header
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> DeleteAuthTokenAsync()
        {
            return DeleteAuthTokenAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the Token indicated in the Authorization Header
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> DeleteAuthTokenAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/tokens");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual Token
        /// </summary>
        /// <param name="tokenId">Token ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenInfo> GetTokenAsync(string tokenId)
        {
            return GetTokenAsync(tokenId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual Token
        /// </summary>
        /// <param name="tokenId">Token ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenInfo> GetTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken)
        {
            if (tokenId == null)
                throw new System.ArgumentNullException("tokenId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/tokens/{tokenId}");
            urlBuilder_.Replace("{tokenId}", System.Uri.EscapeDataString(ConvertToString(tokenId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete the Token indicated as parameter
        /// </summary>
        /// <param name="tokenId">Token ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> DeleteTokenAsync(string tokenId)
        {
            return DeleteTokenAsync(tokenId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the Token indicated as parameter
        /// </summary>
        /// <param name="tokenId">Token ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> DeleteTokenAsync(string tokenId, System.Threading.CancellationToken cancellationToken)
        {
            if (tokenId == null)
                throw new System.ArgumentNullException("tokenId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/tokens/{tokenId}");
            urlBuilder_.Replace("{tokenId}", System.Uri.EscapeDataString(ConvertToString(tokenId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple Users
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserInfo>> GetUsersAsync()
        {
            return GetUsersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple Users
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserInfo>> GetUsersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/users");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<UserInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new User
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> CreateUserAsync(object body)
        {
            return CreateUserAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new User
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> CreateUserAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/users");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<UserInfo> GetUserAsync(string userId)
        {
            return GetUserAsync(userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UserInfo> GetUserAsync(string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/users/{userId}");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UserInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task EditUserAsync(object body, string userId)
        {
            return EditUserAsync(body, userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task EditUserAsync(object body, string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/users/{userId}");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteUserAsync(string userId)
        {
            return DeleteUserAsync(userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a User
        /// </summary>
        /// <param name="userId">User ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteUserAsync(string userId, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/users/{userId}");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple Projects
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectInfo>> GetProjectsAsync()
        {
            return GetProjectsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple Projects
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectInfo>> GetProjectsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/projects");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new Project
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> CreateProjectAsync(object body)
        {
            return CreateProjectAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Project
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> CreateProjectAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/projects");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectInfo> GetProjectAsync(string projectId)
        {
            return GetProjectAsync(projectId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectInfo> GetProjectAsync(string projectId, System.Threading.CancellationToken cancellationToken)
        {
            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/projects/{projectId}");
            urlBuilder_.Replace("{projectId}", System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task EditProjectAsync(object body, string projectId)
        {
            return EditProjectAsync(body, projectId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task EditProjectAsync(object body, string projectId, System.Threading.CancellationToken cancellationToken)
        {
            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/projects/{projectId}");
            urlBuilder_.Replace("{projectId}", System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteProjectAsync(string projectId)
        {
            return DeleteProjectAsync(projectId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Project
        /// </summary>
        /// <param name="projectId">Project ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProjectAsync(string projectId, System.Threading.CancellationToken cancellationToken)
        {
            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/projects/{projectId}");
            urlBuilder_.Replace("{projectId}", System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple Roles
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleInfo>> GetRolesAsync()
        {
            return GetRolesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple Roles
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleInfo>> GetRolesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/roles");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RoleInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new Role
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId> CreateRoleAsync(object body)
        {
            return CreateRoleAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new Role
        /// </summary>
        /// <returns>Created</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId> CreateRoleAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/roles");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RoleInfo> GetRoleAsync(string roleId)
        {
            return GetRoleAsync(roleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RoleInfo> GetRoleAsync(string roleId, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/roles/{roleId}");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task EditRoleAsync(object body, string roleId)
        {
            return EditRoleAsync(body, roleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task EditRoleAsync(object body, string roleId, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/roles/{roleId}");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteRoleAsync(string roleId)
        {
            return DeleteRoleAsync(roleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a Role
        /// </summary>
        /// <param name="roleId">Role ID/Name</param>
        /// <returns>No Content</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteRoleAsync(string roleId, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/roles/{roleId}");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple VIMs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VimInfo>> GetVIMsAsync()
        {
            return GetVIMsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VIMs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VimInfo>> GetVIMsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vims");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VimInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new VIM
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVIMAsync(object body)
        {
            return CreateVIMAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new VIM
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVIMAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vims");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId_plus_OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VimInfo> GetVIMAsync(System.Guid vimId)
        {
            return GetVIMAsync(vimId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VimInfo> GetVIMAsync(System.Guid vimId, System.Threading.CancellationToken cancellationToken)
        {
            if (vimId == null)
                throw new System.ArgumentNullException("vimId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vims/{vimId}");
            urlBuilder_.Replace("{vimId}", System.Uri.EscapeDataString(ConvertToString(vimId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VimInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OpId> EditVIMAsync(object body, System.Guid vimId)
        {
            return EditVIMAsync(body, vimId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OpId> EditVIMAsync(object body, System.Guid vimId, System.Threading.CancellationToken cancellationToken)
        {
            if (vimId == null)
                throw new System.ArgumentNullException("vimId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vims/{vimId}");
            urlBuilder_.Replace("{vimId}", System.Uri.EscapeDataString(ConvertToString(vimId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteVIMAsync(System.Guid vimId)
        {
            return DeleteVIMAsync(vimId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a VIM
        /// </summary>
        /// <param name="vimId">VIM ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteVIMAsync(System.Guid vimId, System.Threading.CancellationToken cancellationToken)
        {
            if (vimId == null)
                throw new System.ArgumentNullException("vimId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vims/{vimId}");
            urlBuilder_.Replace("{vimId}", System.Uri.EscapeDataString(ConvertToString(vimId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple VIM Accounts
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VimInfo>> GetVimAccountsAsync()
        {
            return GetVimAccountsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VIM Accounts
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VimInfo>> GetVimAccountsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vim_accounts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VimInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new VIM Account
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVimAccountAsync(object body)
        {
            return CreateVimAccountAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new VIM Account
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVimAccountAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vim_accounts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId_plus_OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VimInfo> GetVimAccountAsync(System.Guid vimAccountId)
        {
            return GetVimAccountAsync(vimAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VimInfo> GetVimAccountAsync(System.Guid vimAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (vimAccountId == null)
                throw new System.ArgumentNullException("vimAccountId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vim_accounts/{vimAccountId}");
            urlBuilder_.Replace("{vimAccountId}", System.Uri.EscapeDataString(ConvertToString(vimAccountId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VimInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OpId> EditVimAccountAsync(object body, System.Guid vimAccountId)
        {
            return EditVimAccountAsync(body, vimAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OpId> EditVimAccountAsync(object body, System.Guid vimAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (vimAccountId == null)
                throw new System.ArgumentNullException("vimAccountId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vim_accounts/{vimAccountId}");
            urlBuilder_.Replace("{vimAccountId}", System.Uri.EscapeDataString(ConvertToString(vimAccountId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteVimAccountAsync(System.Guid vimAccountId)
        {
            return DeleteVimAccountAsync(vimAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a VIM Account
        /// </summary>
        /// <param name="vimAccountId">VIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteVimAccountAsync(System.Guid vimAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (vimAccountId == null)
                throw new System.ArgumentNullException("vimAccountId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vim_accounts/{vimAccountId}");
            urlBuilder_.Replace("{vimAccountId}", System.Uri.EscapeDataString(ConvertToString(vimAccountId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple WIM Accounts
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WimInfo>> GetWimAccountsAsync()
        {
            return GetWimAccountsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple WIM Accounts
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WimInfo>> GetWimAccountsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/wim_accounts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WimInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new WIM Account
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateWimAccountAsync(object body)
        {
            return CreateWimAccountAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new WIM Account
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateWimAccountAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/wim_accounts");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId_plus_OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<WimInfo> GetWimAccountAsync(System.Guid wimAccountId)
        {
            return GetWimAccountAsync(wimAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WimInfo> GetWimAccountAsync(System.Guid wimAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (wimAccountId == null)
                throw new System.ArgumentNullException("wimAccountId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/wim_accounts/{wimAccountId}");
            urlBuilder_.Replace("{wimAccountId}", System.Uri.EscapeDataString(ConvertToString(wimAccountId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WimInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OpId> EditWimAccountAsync(object body, System.Guid wimAccountId)
        {
            return EditWimAccountAsync(body, wimAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OpId> EditWimAccountAsync(object body, System.Guid wimAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (wimAccountId == null)
                throw new System.ArgumentNullException("wimAccountId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/wim_accounts/{wimAccountId}");
            urlBuilder_.Replace("{wimAccountId}", System.Uri.EscapeDataString(ConvertToString(wimAccountId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteWimAccountAsync(System.Guid wimAccountId)
        {
            return DeleteWimAccountAsync(wimAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a WIM Account
        /// </summary>
        /// <param name="wimAccountId">WIM Account ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteWimAccountAsync(System.Guid wimAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (wimAccountId == null)
                throw new System.ArgumentNullException("wimAccountId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/wim_accounts/{wimAccountId}");
            urlBuilder_.Replace("{wimAccountId}", System.Uri.EscapeDataString(ConvertToString(wimAccountId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple SDNs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SdnInfo>> GetSDNsAsync()
        {
            return GetSDNsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple SDNs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SdnInfo>> GetSDNsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/sdns");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SdnInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new SDN
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateSDNAsync(object body)
        {
            return CreateSDNAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new SDN
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateSDNAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/sdns");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId_plus_OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SdnInfo> GetSDNAsync(System.Guid sdnId)
        {
            return GetSDNAsync(sdnId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SdnInfo> GetSDNAsync(System.Guid sdnId, System.Threading.CancellationToken cancellationToken)
        {
            if (sdnId == null)
                throw new System.ArgumentNullException("sdnId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/sdns/{sdnId}");
            urlBuilder_.Replace("{sdnId}", System.Uri.EscapeDataString(ConvertToString(sdnId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SdnInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OpId> EditSDNAsync(object body, System.Guid sdnId)
        {
            return EditSDNAsync(body, sdnId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OpId> EditSDNAsync(object body, System.Guid sdnId, System.Threading.CancellationToken cancellationToken)
        {
            if (sdnId == null)
                throw new System.ArgumentNullException("sdnId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/sdns/{sdnId}");
            urlBuilder_.Replace("{sdnId}", System.Uri.EscapeDataString(ConvertToString(sdnId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteSDNAsync(System.Guid sdnId)
        {
            return DeleteSDNAsync(sdnId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a SDN
        /// </summary>
        /// <param name="sdnId">SDN ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSDNAsync(System.Guid sdnId, System.Threading.CancellationToken cancellationToken)
        {
            if (sdnId == null)
                throw new System.ArgumentNullException("sdnId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/sdns/{sdnId}");
            urlBuilder_.Replace("{sdnId}", System.Uri.EscapeDataString(ConvertToString(sdnId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple K8s Clusters
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<K8sClusterInfo>> GetK8sClustersAsync()
        {
            return GetK8sClustersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple K8s Clusters
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<K8sClusterInfo>> GetK8sClustersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8sclusters");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<K8sClusterInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new K8s Cluster
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateK8sClusterAsync(object body)
        {
            return CreateK8sClusterAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new K8s Cluster
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateK8sClusterAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8sclusters");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId_plus_OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<K8sClusterInfo> GetK8sClusterAsync(System.Guid k8sClusterId)
        {
            return GetK8sClusterAsync(k8sClusterId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<K8sClusterInfo> GetK8sClusterAsync(System.Guid k8sClusterId, System.Threading.CancellationToken cancellationToken)
        {
            if (k8sClusterId == null)
                throw new System.ArgumentNullException("k8sClusterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8sclusters/{k8sClusterId}");
            urlBuilder_.Replace("{k8sClusterId}", System.Uri.EscapeDataString(ConvertToString(k8sClusterId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<K8sClusterInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OpId> EditK8sClusterAsync(object body, System.Guid k8sClusterId)
        {
            return EditK8sClusterAsync(body, k8sClusterId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OpId> EditK8sClusterAsync(object body, System.Guid k8sClusterId, System.Threading.CancellationToken cancellationToken)
        {
            if (k8sClusterId == null)
                throw new System.ArgumentNullException("k8sClusterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8sclusters/{k8sClusterId}");
            urlBuilder_.Replace("{k8sClusterId}", System.Uri.EscapeDataString(ConvertToString(k8sClusterId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteK8sClusterAsync(System.Guid k8sClusterId)
        {
            return DeleteK8sClusterAsync(k8sClusterId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a K8s Cluster
        /// </summary>
        /// <param name="k8sClusterId">K8s Cluster ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteK8sClusterAsync(System.Guid k8sClusterId, System.Threading.CancellationToken cancellationToken)
        {
            if (k8sClusterId == null)
                throw new System.ArgumentNullException("k8sClusterId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8sclusters/{k8sClusterId}");
            urlBuilder_.Replace("{k8sClusterId}", System.Uri.EscapeDataString(ConvertToString(k8sClusterId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple VCAs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VcaInfo>> GetVcasAsync()
        {
            return GetVcasAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple VCAs
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VcaInfo>> GetVcasAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vca");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<VcaInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new VCA
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVcaAsync(object body)
        {
            return CreateVcaAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new VCA
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateVcaAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vca");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId_plus_OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<VcaInfo> GetVcaAsync(System.Guid vcaId)
        {
            return GetVcaAsync(vcaId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<VcaInfo> GetVcaAsync(System.Guid vcaId, System.Threading.CancellationToken cancellationToken)
        {
            if (vcaId == null)
                throw new System.ArgumentNullException("vcaId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vca/{vcaId}");
            urlBuilder_.Replace("{vcaId}", System.Uri.EscapeDataString(ConvertToString(vcaId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<VcaInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Modify a VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OpId> EditVcaAsync(object body, System.Guid vcaId)
        {
            return EditVcaAsync(body, vcaId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Modify a VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OpId> EditVcaAsync(object body, System.Guid vcaId, System.Threading.CancellationToken cancellationToken)
        {
            if (vcaId == null)
                throw new System.ArgumentNullException("vcaId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vca/{vcaId}");
            urlBuilder_.Replace("{vcaId}", System.Uri.EscapeDataString(ConvertToString(vcaId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteVcaAsync(System.Guid vcaId)
        {
            return DeleteVcaAsync(vcaId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a VCA
        /// </summary>
        /// <param name="vcaId">VCA ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteVcaAsync(System.Guid vcaId, System.Threading.CancellationToken cancellationToken)
        {
            if (vcaId == null)
                throw new System.ArgumentNullException("vcaId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/vca/{vcaId}");
            urlBuilder_.Replace("{vcaId}", System.Uri.EscapeDataString(ConvertToString(vcaId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about multiple K8s Repos
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<K8sRepoInfo>> GetK8sReposAsync()
        {
            return GetK8sReposAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about multiple K8s Repos
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<K8sRepoInfo>> GetK8sReposAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8srepos");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<K8sRepoInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a new K8s Repo
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateK8sRepoAsync(object body)
        {
            return CreateK8sRepoAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new K8s Repo
        /// </summary>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ObjectId_plus_OpId> CreateK8sRepoAsync(object body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8srepos");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ObjectId_plus_OpId>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Query information about an individual K8s Repo
        /// </summary>
        /// <param name="k8sRepoId">K8s Repo ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<K8sRepoInfo> GetK8sRepoAsync(System.Guid k8sRepoId)
        {
            return GetK8sRepoAsync(k8sRepoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Query information about an individual K8s Repo
        /// </summary>
        /// <param name="k8sRepoId">K8s Repo ID</param>
        /// <returns>OK</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<K8sRepoInfo> GetK8sRepoAsync(System.Guid k8sRepoId, System.Threading.CancellationToken cancellationToken)
        {
            if (k8sRepoId == null)
                throw new System.ArgumentNullException("k8sRepoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8srepos/{k8sRepoId}");
            urlBuilder_.Replace("{k8sRepoId}", System.Uri.EscapeDataString(ConvertToString(k8sRepoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<K8sRepoInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a K8s Repo
        /// </summary>
        /// <param name="k8sRepoId">K8s Repo ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteK8sRepoAsync(System.Guid k8sRepoId)
        {
            return DeleteK8sRepoAsync(k8sRepoId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a K8s Repo
        /// </summary>
        /// <param name="k8sRepoId">K8s Repo ID</param>
        /// <returns>Accepted</returns>
        /// <exception cref="OsmApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteK8sRepoAsync(System.Guid k8sRepoId, System.Threading.CancellationToken cancellationToken)
        {
            if (k8sRepoId == null)
                throw new System.ArgumentNullException("k8sRepoId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/admin/v1/k8srepos/{k8sRepoId}");
            urlBuilder_.Replace("{k8sRepoId}", System.Uri.EscapeDataString(ConvertToString(k8sRepoId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Bad request. The server cannot process the request due to a client error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Authorization information is missing or invalid.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Not enough permissions to do this operation.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The specified resource was not found.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("This method is not supported for the requested resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 406)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The requested resource content cannot match the Accept headers sent in the request.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 409)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The operation cannot be executed currently, due to a conflict with the state of the resource.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("The request was well-formed but was unable to be followed due to semantic errors.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Internal server error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 503)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Service temporarily unavailable.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 5XX)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new OsmApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new OsmApiException<ProblemDetails>("Unexpected error.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new OsmApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new OsmApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ObjectId
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyValuePairs
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateNsdInfoRequest
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// NS Descriptor Information
    /// <br/>Only generic fields (id, name, description) are described
    /// <br/>For a full specification of the NS Descriptor see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/nsd.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsdInfoModifications
    {
        /// <summary>
        /// NSD Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// NSD Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// NSD Description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// NS Descriptor Information
    /// <br/>Only generic fields (_id, id, name, description) are described
    /// <br/>For a full specification of the NS Descriptor see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/nsd.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsdInfo
    {
        /// <summary>
        /// Identifier of the onboarded individual NS descriptor
        /// <br/>resource. This identifier is allocated by the NFVO.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid _id { get; set; }

        /// <summary>
        /// This identifier, which is allocated by the NSD
        /// <br/>designer, identifies the NSD in a globally unique
        /// <br/>way. It is copied from the NSD content and shall be
        /// <br/>present after the NSD content is on-boarded.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the onboarded NSD. This information is
        /// <br/>copied from the NSD content and shall be present
        /// <br/>after the NSD content is on-boarded.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the onboarded NSD.
        /// <br/>This information is copied from the NSD content.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfNsdInfo : System.Collections.ObjectModel.Collection<NsdInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateVnfPkgInfoRequest
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// VNF Package Information
    /// <br/>Only generic fields (id, name, description) are described
    /// <br/>For a full specification of the VNF Descriptor see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/vnfd.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VnfPkgInfoModifications
    {
        /// <summary>
        /// VNF Package Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// VNF Package Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// VNF Package description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// VNF Package Information
    /// <br/>Only generic fields (_id, id, name, description) are described
    /// <br/>For a full specification of the VNF Descriptor see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/vnfd.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VnfPkgInfo
    {
        /// <summary>
        /// Identifier of the VNF package. This identifier is allocated by the NFVO.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid _id { get; set; }

        /// <summary>
        /// VNF Package Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// VNF Package Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// VNF Package description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfVnfPkgInfo : System.Collections.ObjectModel.Collection<VnfPkgInfo>
    {

    }

    /// <summary>
    /// NS Instance Information
    /// <br/>Only generic fields (_id, id, name, description) are described
    /// <br/>For a full specification of the NS Instance see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/nsr.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsInstance
    {
        /// <summary>
        /// Identifier of the NS instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid _id { get; set; }

        /// <summary>
        /// Identifier of the NS instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Human readable name of the NS instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Human readable description of the NS instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstantiateNsRequest
    {
        /// <summary>
        /// Human-readable name of the NS instance to be created.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nsName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NsName { get; set; }

        /// <summary>
        /// Identifier of the NSD that defines the NS instance to be created.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nsdId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid NsdId { get; set; }

        /// <summary>
        /// Identifier of the VIM Account where the NS instance shall be created.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vimAccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid VimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOperationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LcmOperationType { get; set; }

        [Newtonsoft.Json.JsonProperty("nsInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NsInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("netsliceInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NetsliceInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("nsDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NsDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("wimAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForNs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalParamsForNs { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForVnf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalParamsForVnf> AdditionalParamsForVnf { get; set; }

        [Newtonsoft.Json.JsonProperty("ssh_keys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ssh_keys { get; set; }

        [Newtonsoft.Json.JsonProperty("nsr_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Nsr_id { get; set; }

        [Newtonsoft.Json.JsonProperty("vduImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VduImage { get; set; }

        /// <summary>
        /// To compute automatically the target VIM for each VNF based on 
        /// <br/>constrains, e.g. latency. Currently only 'PLA' is supported
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("placement-engine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlacementEngine { get; set; }

        [Newtonsoft.Json.JsonProperty("placement-constraints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object PlacementConstraints { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s-namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sNamespace { get; set; }

        [Newtonsoft.Json.JsonProperty("timeout_ns_deploy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timeout_ns_deploy { get; set; }

        [Newtonsoft.Json.JsonProperty("vnf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Vnf> Vnf { get; set; }

        [Newtonsoft.Json.JsonProperty("vld", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Vld> Vld { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScaleNsRequest
    {
        [Newtonsoft.Json.JsonProperty("scaleType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScaleNsRequestScaleType ScaleType { get; set; }

        /// <summary>
        /// timeout for the scale operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout_ns_scale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timeout_ns_scale { get; set; }

        [Newtonsoft.Json.JsonProperty("scaleVnfData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ScaleVnfData ScaleVnfData { get; set; } = new ScaleVnfData();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TerminateNsRequest
    {
        /// <summary>
        /// timeout for terminate operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout_ns_terminate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timeout_ns_terminate { get; set; }

        /// <summary>
        /// remove network service if termination end without error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoremove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Autoremove { get; set; }

        /// <summary>
        /// Do not execute network service termination primitives
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_terminate_primitives", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skip_terminate_primitives { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfNsInstance : System.Collections.ObjectModel.Collection<NsInstance>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NSinstanceActionRequest
    {
        /// <summary>
        /// name of the primitive in the 'config-descriptor'. If the target is
        /// <br/>a kdu it can be also 'status', 'rollback' or 'upgrade'
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primitive", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Primitive { get; set; }

        /// <summary>
        /// parameters of this primitive
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primitive_params", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyValuePairs Primitive_params { get; set; } = new KeyValuePairs();

        /// <summary>
        /// provide if the target action is for a vnf, vdu or kdu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("member_vnf_index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Member_vnf_index { get; set; }

        /// <summary>
        /// provide if the target action is for a vdu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vdu_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vdu_id { get; set; }

        /// <summary>
        /// provide if the target action is for a kdu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kdu_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kdu_name { get; set; }

        [Newtonsoft.Json.JsonProperty("vdu_count_index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Vdu_count_index { get; set; }

        /// <summary>
        /// timeout for the day 1/2 operation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout_ns_action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timeout_ns_action { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateNSinstanceContentResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("nslcmop_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Nslcmop_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsLcmOpOcc
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOperationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LcmOperationType { get; set; }

        [Newtonsoft.Json.JsonProperty("nsInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NsInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("isAutomaticInvocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAutomaticInvocation { get; set; }

        [Newtonsoft.Json.JsonProperty("isCancelPending", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCancelPending { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("statusEnteredTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float StatusEnteredTime { get; set; }

        [Newtonsoft.Json.JsonProperty("operationParams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationParams OperationParams { get; set; }

        [Newtonsoft.Json.JsonProperty("operationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationState { get; set; }

        [Newtonsoft.Json.JsonProperty("detailed-status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfNsLcmOpOcc : System.Collections.ObjectModel.Collection<NsLcmOpOcc>
    {

    }

    /// <summary>
    /// VNF Instance Information
    /// <br/>Only generic fields (_id, id) are described
    /// <br/>For a full specification of the VNF Instance see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/vnfr.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VnfInstanceInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfVnfInstanceInfo : System.Collections.ObjectModel.Collection<VnfInstanceInfo>
    {

    }

    /// <summary>
    /// NetSlice Template Information
    /// <br/>Only generic fields (_id, id, name) are described
    /// <br/>For a full specification of the NetSlice Template see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/nst.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NstInfo
    {
        /// <summary>
        /// NetSlice Template Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        /// <summary>
        /// Human readable NetSlice Template Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Human readable name of the NetSlice Template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfNstInfo : System.Collections.ObjectModel.Collection<NstInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateNstInfoRequest
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// NetSlice Template Information
    /// <br/>Only generic fields (id, name) are described
    /// <br/>For a full specification of the NetSlice Template see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/nst.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NstInfoModifications
    {
        /// <summary>
        /// NST Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// NST Name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// NetSlice Instance Information
    /// <br/>Only generic fields (_id, id, name, description) are described
    /// <br/>For a full specification of the NetSlice Instance see:
    /// <br/>http://osm-download.etsi.org/ftp/osm-doc/nsi.html
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetSliceInstance
    {
        /// <summary>
        /// Identifier of the NetSlice instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid _id { get; set; }

        /// <summary>
        /// Identifier of the NetSlice instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Human readable name of the NetSlice instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Human readable description of the NetSlice instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfNetSliceInstance : System.Collections.ObjectModel.Collection<NetSliceInstance>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstantiateNsiRequest
    {
        /// <summary>
        /// Human-readable name of the NetSlice instance to be created.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nsiName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NsiName { get; set; }

        /// <summary>
        /// Identifier of the NST that defines the NetSlice instance to be created.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nstId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid NstId { get; set; }

        /// <summary>
        /// Identifier of the VIM Account where the NetSlice instance shall be created.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vimAccountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid VimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOperationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LcmOperationType { get; set; }

        [Newtonsoft.Json.JsonProperty("netsliceInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NetsliceInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("nsiDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NsiDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("ssh_keys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssh_keys { get; set; }

        [Newtonsoft.Json.JsonProperty("nsi_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Nsi_id { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForNsi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalParamsForNsi { get; set; }

        [Newtonsoft.Json.JsonProperty("netslice-subnet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<NetsliceSubnet> NetsliceSubnet { get; set; }

        [Newtonsoft.Json.JsonProperty("netslice-vld", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<NetsliceVld> NetsliceVld { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TerminateNsiRequest
    {
        /// <summary>
        /// Timestamp indicating the end time of the NSI, i.e. the NSI will be terminated
        /// <br/>automatically at this timestamp. Cardinality "0" indicates the NSI termination
        /// <br/>takes place immediately.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminationTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime TerminationTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsiActionRequest
    {
        [Newtonsoft.Json.JsonProperty("primitive", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Primitive { get; set; }

        [Newtonsoft.Json.JsonProperty("primitive_params", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public KeyValuePairs Primitive_params { get; set; } = new KeyValuePairs();

        [Newtonsoft.Json.JsonProperty("lcmOperationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LcmOperationType { get; set; }

        [Newtonsoft.Json.JsonProperty("netsliceInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NetsliceInstanceId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateNsiContentResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("nsilcmop_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Nsilcmop_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsiLcmOpOcc
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOperationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LcmOperationType { get; set; }

        [Newtonsoft.Json.JsonProperty("netsliceInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NetsliceInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("isAutomaticInvocation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAutomaticInvocation { get; set; }

        [Newtonsoft.Json.JsonProperty("isCancelPending", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCancelPending { get; set; }

        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("statusEnteredTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float StatusEnteredTime { get; set; }

        [Newtonsoft.Json.JsonProperty("operationParams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OperationParams2 OperationParams { get; set; }

        [Newtonsoft.Json.JsonProperty("operationState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationState { get; set; }

        [Newtonsoft.Json.JsonProperty("detailed-status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailedStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfNsiLcmOpOcc : System.Collections.ObjectModel.Collection<NsiLcmOpOcc>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string _id { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Admin { get; set; }

        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Project_id { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid User_id { get; set; }

        [Newtonsoft.Json.JsonProperty("project_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project_name { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("issued_at", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Issued_at { get; set; }

        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Expires { get; set; }

        [Newtonsoft.Json.JsonProperty("remote_host", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remote_host { get; set; }

        [Newtonsoft.Json.JsonProperty("remote_port", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Remote_port { get; set; }

        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Roles> Roles { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfTokenInfo : System.Collections.ObjectModel.Collection<TokenInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateTokenRequest
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("project_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("project_role_mappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Project_role_mappings> Project_role_mappings { get; set; }

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Projects { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfUserInfo : System.Collections.ObjectModel.Collection<UserInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectRoleMappings : System.Collections.ObjectModel.Collection<Anonymous>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectRoleMappingsOpt : System.Collections.ObjectModel.Collection<Anonymous2>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUserRequest
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Projects { get; set; }

        [Newtonsoft.Json.JsonProperty("project_role_mappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRoleMappings Project_role_mappings { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShortNameList : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// Array edition keys must start with '$'
    /// <br/>and follow the syntax defined in: https://osm.etsi.org/wikipub/index.php/NBI_API_Description
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayEditionSchema
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditUserRequest
    {
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShortNameList Projects { get; set; }

        [Newtonsoft.Json.JsonProperty("project_role_mappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRoleMappings Project_role_mappings { get; set; }

        [Newtonsoft.Json.JsonProperty("add_project_role_mappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRoleMappings Add_project_role_mappings { get; set; }

        [Newtonsoft.Json.JsonProperty("remove_project_role_mappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRoleMappingsOpt Remove_project_role_mappings { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuotasInfo
    {
        [Newtonsoft.Json.JsonProperty("vnfds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Vnfds { get; set; }

        [Newtonsoft.Json.JsonProperty("nsds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Nsds { get; set; }

        [Newtonsoft.Json.JsonProperty("slice_templates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slice_templates { get; set; }

        [Newtonsoft.Json.JsonProperty("pduds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Pduds { get; set; }

        [Newtonsoft.Json.JsonProperty("ns_instances", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Ns_instances { get; set; }

        [Newtonsoft.Json.JsonProperty("slice_instances", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Slice_instances { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Vim_accounts { get; set; }

        [Newtonsoft.Json.JsonProperty("wim_accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Wim_accounts { get; set; }

        [Newtonsoft.Json.JsonProperty("sdn_controllers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Sdn_controllers { get; set; }

        [Newtonsoft.Json.JsonProperty("k8sclusters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int K8sclusters { get; set; }

        [Newtonsoft.Json.JsonProperty("vca", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Vca { get; set; }

        [Newtonsoft.Json.JsonProperty("k8srepos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int K8srepos { get; set; }

        [Newtonsoft.Json.JsonProperty("osmrepos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Osmrepos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditQuotasInfo
    {
        [Newtonsoft.Json.JsonProperty("vnfds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Vnfds { get; set; }

        [Newtonsoft.Json.JsonProperty("nsds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Nsds { get; set; }

        [Newtonsoft.Json.JsonProperty("slice_templates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Slice_templates { get; set; }

        [Newtonsoft.Json.JsonProperty("pduds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Pduds { get; set; }

        [Newtonsoft.Json.JsonProperty("ns_instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Ns_instances { get; set; }

        [Newtonsoft.Json.JsonProperty("slice_instances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Slice_instances { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_accounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Vim_accounts { get; set; }

        [Newtonsoft.Json.JsonProperty("wim_accounts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Wim_accounts { get; set; }

        [Newtonsoft.Json.JsonProperty("sdn_controllers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Sdn_controllers { get; set; }

        [Newtonsoft.Json.JsonProperty("k8sclusters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? K8sclusters { get; set; }

        [Newtonsoft.Json.JsonProperty("vca", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Vca { get; set; }

        [Newtonsoft.Json.JsonProperty("k8srepos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? K8srepos { get; set; }

        [Newtonsoft.Json.JsonProperty("osmrepos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? Osmrepos { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("quotas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuotasInfo Quotas { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfProjectInfo : System.Collections.ObjectModel.Collection<ProjectInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateProjectRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Admin { get; set; }

        [Newtonsoft.Json.JsonProperty("quotas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QuotasInfo Quotas { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditProjectRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Admin { get; set; }

        [Newtonsoft.Json.JsonProperty("quotas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EditQuotasInfo Quotas { get; set; }

    }

    /// <summary>
    /// Permissions keys must follow the syntax 'main_topic[:subtopic[:id[:component|action|etc]]]'
    /// <br/>Permission values are either true or false
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermissionsInfo : System.Collections.Generic.Dictionary<string, bool>
    {

    }

    /// <summary>
    /// Permissions keys must follow the syntax 'main_topic[:subtopic[:id[:component|action|etc]]]'
    /// <br/>Permission values are either true, false, or null
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditPermissionsInfo : System.Collections.Generic.Dictionary<string, bool?>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionsInfo Permissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfRoleInfo : System.Collections.ObjectModel.Collection<RoleInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateRoleRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionsInfo Permissions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditRoleRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EditPermissionsInfo Permissions { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VimType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"openvim")]
        Openvim = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"openstack")]
        Openstack = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"vmware")]
        Vmware = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"opennebula")]
        Opennebula = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"aws")]
        Aws = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"azure")]
        Azure = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"fos")]
        Fos = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VimInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("vim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim { get; set; }

        [Newtonsoft.Json.JsonProperty("datacenter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datacenter { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VimType Vim_type { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Vim_url { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_tenant_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim_tenant_name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim_user { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim_password { get; set; }

        [Newtonsoft.Json.JsonProperty("vca", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Vca { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config { get; set; }

        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Resources { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfVimInfo : System.Collections.ObjectModel.Collection<VimInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateVimRequest
    {
        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("vim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim { get; set; }

        [Newtonsoft.Json.JsonProperty("datacenter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datacenter { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VimType Vim_type { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Vim_url { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_tenant_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Vim_tenant_name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_user", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Vim_user { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Vim_password { get; set; }

        [Newtonsoft.Json.JsonProperty("vca", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Vca { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config { get; set; }

        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Resources { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditVimRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("vim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim { get; set; }

        [Newtonsoft.Json.JsonProperty("datacenter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Datacenter { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VimType Vim_type { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Vim_url { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_tenant_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim_tenant_name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim_user { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vim_password { get; set; }

        [Newtonsoft.Json.JsonProperty("vca", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Vca { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ObjectId_plus_OpId
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("op_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Op_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpId
    {
        [Newtonsoft.Json.JsonProperty("op_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Op_id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WimType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"onos")]
        Onos = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"odl")]
        Odl = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tapi")]
        Tapi = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dynpac")]
        Dynpac = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fake")]
        Fake = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WimInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("wim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wim { get; set; }

        [Newtonsoft.Json.JsonProperty("wim_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WimType Wim_type { get; set; }

        [Newtonsoft.Json.JsonProperty("wim_url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Wim_url { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfWimInfo : System.Collections.ObjectModel.Collection<WimInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateWimRequest
    {
        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("wim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wim { get; set; }

        [Newtonsoft.Json.JsonProperty("wim_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WimType Wim_type { get; set; }

        [Newtonsoft.Json.JsonProperty("wim_url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Wim_url { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditWimRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("wim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wim { get; set; }

        [Newtonsoft.Json.JsonProperty("wim_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Wim_type { get; set; }

        [Newtonsoft.Json.JsonProperty("wim_url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Wim_url { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SdnBasicProperties
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("dpid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dpid { get; set; }

        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Port { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SdnBasicPropertiesType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SdnExtraProperties
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SdnInfo : SdnExtraProperties
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("dpid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dpid { get; set; }

        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Port { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SdnBasicPropertiesType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfSdnInfo : System.Collections.ObjectModel.Collection<SdnInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsPmJobReportInfo
    {
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Entries> Entries { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PduInterfaces : System.Collections.ObjectModel.Collection<Anonymous3>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PduInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("shared", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Shared { get; set; }

        [Newtonsoft.Json.JsonProperty("vims", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Vims { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Vim_accounts { get; set; }

        [Newtonsoft.Json.JsonProperty("interfaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PduInterfaces Interfaces { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfPduInfo : System.Collections.ObjectModel.Collection<PduInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePduRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("shared", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Shared { get; set; }

        [Newtonsoft.Json.JsonProperty("vims", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Vims { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Vim_accounts { get; set; }

        [Newtonsoft.Json.JsonProperty("interfaces", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PduInterfaces Interfaces { get; set; } = new PduInterfaces();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditPduRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("shared", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Shared { get; set; }

        [Newtonsoft.Json.JsonProperty("vims", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Vims { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_accounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Vim_accounts { get; set; }

        [Newtonsoft.Json.JsonProperty("interfaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PduInterfaces Interfaces { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class K8sClusterNetList : System.Collections.ObjectModel.Collection<object>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class K8sClusterInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Credentials { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_account", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Vim_account { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8s_version { get; set; }

        [Newtonsoft.Json.JsonProperty("nets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public K8sClusterNetList Nets { get; set; }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("cni", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Cni { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfK8sClusterInfo : System.Collections.ObjectModel.Collection<K8sClusterInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateK8sClusterRequest
    {
        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Credentials { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("vim_account", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Vim_account { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s_version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string K8s_version { get; set; }

        [Newtonsoft.Json.JsonProperty("nets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public K8sClusterNetList Nets { get; set; } = new K8sClusterNetList();

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("cni", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Cni { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditK8sClusterRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Credentials { get; set; }

        [Newtonsoft.Json.JsonProperty("vim_account", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Vim_account { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8s_version { get; set; }

        [Newtonsoft.Json.JsonProperty("nets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public K8sClusterNetList Nets { get; set; }

        [Newtonsoft.Json.JsonProperty("namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [Newtonsoft.Json.JsonProperty("cni", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Cni { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VcaInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("secret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret { get; set; }

        [Newtonsoft.Json.JsonProperty("cacert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cacert { get; set; }

        [Newtonsoft.Json.JsonProperty("lxd-cloud", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LxdCloud { get; set; }

        [Newtonsoft.Json.JsonProperty("lxd-credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LxdCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s-cloud", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sCloud { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s-credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("model-config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ModelConfig { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfVcaInfo : System.Collections.ObjectModel.Collection<VcaInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateVcaRequest
    {
        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_type { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("secret", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Secret { get; set; }

        [Newtonsoft.Json.JsonProperty("cacert", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Cacert { get; set; }

        [Newtonsoft.Json.JsonProperty("lxd-cloud", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LxdCloud { get; set; }

        [Newtonsoft.Json.JsonProperty("lxd-credentials", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LxdCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s-cloud", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string K8sCloud { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s-credentials", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string K8sCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("model-config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ModelConfig { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EditVcaRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Endpoints { get; set; }

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User { get; set; }

        [Newtonsoft.Json.JsonProperty("secret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret { get; set; }

        [Newtonsoft.Json.JsonProperty("cacert", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cacert { get; set; }

        [Newtonsoft.Json.JsonProperty("lxd-cloud", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LxdCloud { get; set; }

        [Newtonsoft.Json.JsonProperty("lxd-credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LxdCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s-cloud", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sCloud { get; set; }

        [Newtonsoft.Json.JsonProperty("k8s-credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sCredentials { get; set; }

        [Newtonsoft.Json.JsonProperty("model-config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ModelConfig { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum K8sRepoType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"chart")]
        Chart = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"bundle")]
        Bundle = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class K8sRepoInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public K8sRepoType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Url { get; set; }

        /// <summary>
        /// repository username
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        /// <summary>
        /// repository password
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// verify certificates of HTTPS-enabled servers using this CA bundle
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ca-file", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaFile { get; set; }

        /// <summary>
        /// identify HTTPS client using this SSL certificate file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cert-file", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertFile { get; set; }

        /// <summary>
        /// skip tls certificate checks for the repository
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip-tls-verify", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SkipTlsVerify { get; set; }

        /// <summary>
        /// identify HTTPS client using this SSL key file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key-file", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyFile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfK8sRepoInfo : System.Collections.ObjectModel.Collection<K8sRepoInfo>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateK8sRepoRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public K8sRepoType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NslcmSubscriptionResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Filter { get; set; }

        [Newtonsoft.Json.JsonProperty("CallbackUri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri CallbackUri { get; set; }

        [Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NslcmSubscriptionInfo
    {
        [Newtonsoft.Json.JsonProperty("_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid _id { get; set; }

        [Newtonsoft.Json.JsonProperty("_admin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object _admin { get; set; }

        [Newtonsoft.Json.JsonProperty("schema_version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Schema_version { get; set; }

        [Newtonsoft.Json.JsonProperty("CallbackUri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri CallbackUri { get; set; }

        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Filter { get; set; }

        [Newtonsoft.Json.JsonProperty("authentication", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authenticationschema Authentication { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArrayOfNslcmSubscriptionInfo : System.Collections.ObjectModel.Collection<NslcmSubscriptionInfo>
    {

    }

    /// <summary>
    /// used to identify the network service
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsInstanceSubscriptionFilter : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VnfdIds : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PnfdIds : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsInstanceIds : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NsInstanceNames : System.Collections.ObjectModel.Collection<string>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Nslcmsubschema
    {
        [Newtonsoft.Json.JsonProperty("nsInstanceSubscriptionFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NsInstanceSubscriptionFilter2 NsInstanceSubscriptionFilter { get; set; }

        /// <summary>
        /// If NsLcmOperationOccurrenceNotification is selected then at least operationTypes or states is required. If NsLcmOperationOccurrenceNotification is selected then at least nsComponentTypes, lcmOpName and lcmOpOccStatus is required
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NotificationTypes> NotificationTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("operationTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<OperationTypes> OperationTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("operationStates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<OperationStates> OperationStates { get; set; }

        [Newtonsoft.Json.JsonProperty("nsComponentTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NsComponentTypes> NsComponentTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOpNameImpactingNsComponent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<LcmOpNameImpactingNsComponent> LcmOpNameImpactingNsComponent { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOpOccStatusImpactingNsComponent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<LcmOpOccStatusImpactingNsComponent> LcmOpOccStatusImpactingNsComponent { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Authenticationschema
    {
        [Newtonsoft.Json.JsonProperty("authType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AuthenticationschemaAuthType AuthType { get; set; }

        [Newtonsoft.Json.JsonProperty("paramsBasic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParamsBasic ParamsBasic { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NslcmSubscriptionRequest
    {
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Nslcmsubschema Filter { get; set; }

        [Newtonsoft.Json.JsonProperty("CallbackUri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri CallbackUri { get; set; }

        [Newtonsoft.Json.JsonProperty("authentication", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Authenticationschema Authentication { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalParamsForVnf
    {
        [Newtonsoft.Json.JsonProperty("member-vnf-index", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemberVnfIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalParams { get; set; }

        /// <summary>
        /// use this namespace for all the KDU deployed in this VNF
        /// <br/>(if any). By default it is used the id of the project
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("k8s-namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sNamespace { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForVdu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalParamsForVdu> AdditionalParamsForVdu { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForKdu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalParamsForKdu> AdditionalParamsForKdu { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vnf
    {
        [Newtonsoft.Json.JsonProperty("member-vnf-index", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemberVnfIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("vimAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid VimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("vdu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Vdu> Vdu { get; set; }

        [Newtonsoft.Json.JsonProperty("internal-vld", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<InternalVld> InternalVld { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vld
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkName { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("ns-net", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object NsNet { get; set; }

        [Newtonsoft.Json.JsonProperty("wimAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object IpProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("provider-network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProviderNetwork ProviderNetwork { get; set; }

        [Newtonsoft.Json.JsonProperty("vnfd-connection-point-ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<VnfdConnectionPointRef> VnfdConnectionPointRef { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScaleNsRequestScaleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCALE_VNF")]
        SCALE_VNF = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScaleVnfData
    {
        [Newtonsoft.Json.JsonProperty("scaleVnfType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScaleVnfDataScaleVnfType ScaleVnfType { get; set; }

        [Newtonsoft.Json.JsonProperty("scaleByStepData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ScaleByStepData ScaleByStepData { get; set; } = new ScaleByStepData();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationParams
    {
        [Newtonsoft.Json.JsonProperty("nsName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NsName { get; set; }

        [Newtonsoft.Json.JsonProperty("nsdId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NsdId { get; set; }

        [Newtonsoft.Json.JsonProperty("vimAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid VimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("nsInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NsInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOperationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LcmOperationType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        [Newtonsoft.Json.JsonProperty("nsInstance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NsInstance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetsliceSubnet
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("nsName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NsName { get; set; }

        [Newtonsoft.Json.JsonProperty("nsdId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NsdId { get; set; }

        [Newtonsoft.Json.JsonProperty("vimAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid VimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOperationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LcmOperationType { get; set; }

        [Newtonsoft.Json.JsonProperty("nsInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NsInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("netsliceInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NetsliceInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("nsDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NsDescription { get; set; }

        [Newtonsoft.Json.JsonProperty("wimAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForNs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalParamsForNs { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForVnf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalParamsForVnf2> AdditionalParamsForVnf { get; set; }

        [Newtonsoft.Json.JsonProperty("ssh_keys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Ssh_keys { get; set; }

        [Newtonsoft.Json.JsonProperty("nsr_id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Nsr_id { get; set; }

        [Newtonsoft.Json.JsonProperty("vduImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VduImage { get; set; }

        [Newtonsoft.Json.JsonProperty("vnf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Vnf2> Vnf { get; set; }

        [Newtonsoft.Json.JsonProperty("vld", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Vld2> Vld { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetsliceVld
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkName { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object IpProfile { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OperationParams2
    {
        [Newtonsoft.Json.JsonProperty("nsiName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NsiName { get; set; }

        [Newtonsoft.Json.JsonProperty("nstId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NstId { get; set; }

        [Newtonsoft.Json.JsonProperty("vimAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid VimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("netsliceInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid NetsliceInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("lcmOperationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LcmOperationType { get; set; }

        [Newtonsoft.Json.JsonProperty("nslcmops_ids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> Nslcmops_ids { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links2
    {
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        [Newtonsoft.Json.JsonProperty("netsliceInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetsliceInstanceId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Roles
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Project_role_mappings
    {
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Project { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Role { get; set; }

        [Newtonsoft.Json.JsonProperty("project_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project_name { get; set; }

        [Newtonsoft.Json.JsonProperty("role_name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role_name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous2
    {
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SdnBasicPropertiesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"floodlight")]
        Floodlight = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"opendaylight")]
        Opendaylight = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"onos")]
        Onos = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entries
    {
        [Newtonsoft.Json.JsonProperty("objectInstanceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ObjectInstanceId { get; set; }

        [Newtonsoft.Json.JsonProperty("performanceMetric", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PerformanceMetric { get; set; }

        [Newtonsoft.Json.JsonProperty("performanceValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerformanceValue PerformanceValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous3
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("mgmt", Required = Newtonsoft.Json.Required.Always)]
        public bool Mgmt { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IpAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("mac-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MacAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkName { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NsIdentifierCreationNotification")]
        NsIdentifierCreationNotification = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NsIdentifierDeletionNotification")]
        NsIdentifierDeletionNotification = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NsLcmOperationOccurrenceNotification")]
        NsLcmOperationOccurrenceNotification = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NsChangeNotification")]
        NsChangeNotification = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INSTANTIATE")]
        INSTANTIATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SCALE")]
        SCALE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TERMINATE")]
        TERMINATE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE")]
        UPDATE = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HEAL")]
        HEAL = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationStates
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSING")]
        PROCESSING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIALLY_COMPLETED")]
        PARTIALLY_COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED_TEMP")]
        FAILED_TEMP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLLING_BACK")]
        ROLLING_BACK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLLED_BACK")]
        ROLLED_BACK = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NsComponentTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VNF")]
        VNF = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NS")]
        NS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PNF")]
        PNF = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LcmOpNameImpactingNsComponent
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_INSTANTIATE")]
        VNF_INSTANTIATE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_SCALE")]
        VNF_SCALE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_SCALE_TO_LEVEL")]
        VNF_SCALE_TO_LEVEL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_CHANGE_FLAVOUR")]
        VNF_CHANGE_FLAVOUR = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_TERMINATE")]
        VNF_TERMINATE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_HEAL")]
        VNF_HEAL = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_OPERATE")]
        VNF_OPERATE = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_CHANGE_EXT_CONN")]
        VNF_CHANGE_EXT_CONN = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"VNF_MODIFY_INFO")]
        VNF_MODIFY_INFO = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"NS_INSTANTIATE")]
        NS_INSTANTIATE = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NS_SCALE")]
        NS_SCALE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"NS_UPDATE")]
        NS_UPDATE = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"NS_TERMINATE")]
        NS_TERMINATE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"NS_HEAL")]
        NS_HEAL = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LcmOpOccStatusImpactingNsComponent
    {

        [System.Runtime.Serialization.EnumMember(Value = @"START")]
        START = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETED")]
        COMPLETED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PARTIALLY_COMPLETED")]
        PARTIALLY_COMPLETED = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ROLLED_BACK")]
        ROLLED_BACK = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthenticationschemaAuthType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParamsBasic
    {
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalParamsForVdu
    {
        [Newtonsoft.Json.JsonProperty("vdu_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Vdu_id { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object AdditionalParams { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalParamsForKdu
    {
        [Newtonsoft.Json.JsonProperty("kdu_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Kdu_name { get; set; }

        /// <summary>
        /// use this namespace for this KDU
        /// </summary>
        [Newtonsoft.Json.JsonProperty("k8s-namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sNamespace { get; set; }

        [Newtonsoft.Json.JsonProperty("kdu_model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kdu_model { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalParams { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vdu
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Volume> Volume { get; set; }

        [Newtonsoft.Json.JsonProperty("interface", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Interface> Interface { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternalVld
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkName { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IpProfile IpProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("provider-network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProviderNetwork2 ProviderNetwork { get; set; }

        [Newtonsoft.Json.JsonProperty("internal-connection-point", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<InternalConnectionPoint> InternalConnectionPoint { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProviderNetwork
    {
        [Newtonsoft.Json.JsonProperty("physical-network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalNetwork { get; set; }

        [Newtonsoft.Json.JsonProperty("segmentation-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentationId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VnfdConnectionPointRef
    {
        [Newtonsoft.Json.JsonProperty("member-vnf-index-ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemberVnfIndexRef { get; set; }

        [Newtonsoft.Json.JsonProperty("vnfd-connection-point-ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VnfdConnectionPointRef1 { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScaleVnfDataScaleVnfType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SCALE_IN")]
        SCALE_IN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SCALE_OUT")]
        SCALE_OUT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScaleByStepData
    {
        [Newtonsoft.Json.JsonProperty("scaling-group-descriptor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ScalingGroupDescriptor { get; set; }

        [Newtonsoft.Json.JsonProperty("scaling-policy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScalingPolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("member-vnf-index", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemberVnfIndex { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalParamsForVnf2
    {
        [Newtonsoft.Json.JsonProperty("member-vnf-index", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemberVnfIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalParams { get; set; }

        /// <summary>
        /// use this namespace for all the KDU deployed in this VNF
        /// <br/>(if any). By default it is used the id of the project
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("k8s-namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sNamespace { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForVdu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalParamsForVdu2> AdditionalParamsForVdu { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParamsForKdu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalParamsForKdu2> AdditionalParamsForKdu { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vnf2
    {
        [Newtonsoft.Json.JsonProperty("member-vnf-index", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemberVnfIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("vimAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid VimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("vdu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Vdu2> Vdu { get; set; }

        [Newtonsoft.Json.JsonProperty("internal-vld", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<InternalVld2> InternalVld { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vld2
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkName { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("ns-net", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object NsNet { get; set; }

        [Newtonsoft.Json.JsonProperty("wimAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WimAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object IpProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("provider-network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProviderNetwork3 ProviderNetwork { get; set; }

        [Newtonsoft.Json.JsonProperty("vnfd-connection-point-ref", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<VnfdConnectionPointRef2> VnfdConnectionPointRef { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceValue
    {
        [Newtonsoft.Json.JsonProperty("performanceValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PerformanceValue1 PerformanceValue1 { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"overlay")]
        Overlay = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"underlay")]
        Underlay = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Volume
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-volume-id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VimVolumeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Interface
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("mac-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MacAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("floating-ip-required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FloatingIpRequired { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpProfile
    {
        [Newtonsoft.Json.JsonProperty("ip-version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IpProfileIpVersion IpVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("subnet-address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubnetAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway-address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GatewayAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("dns-server", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<DnsServer> DnsServer { get; set; }

        [Newtonsoft.Json.JsonProperty("dhcp-params", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DhcpParams DhcpParams { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProviderNetwork2
    {
        [Newtonsoft.Json.JsonProperty("physical-network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalNetwork { get; set; }

        [Newtonsoft.Json.JsonProperty("segmentation-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentationId { get; set; }

        [Newtonsoft.Json.JsonProperty("network-type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkType { get; set; }

        /// <summary>
        /// connect additional ports to the created underlay SDN connectivity.
        /// <br/>Normally for external connectivy.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sdn-ports", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<SdnPorts> SdnPorts { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternalConnectionPoint
    {
        [Newtonsoft.Json.JsonProperty("id-ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdRef { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalParamsForVdu2
    {
        [Newtonsoft.Json.JsonProperty("vdu_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Vdu_id { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object AdditionalParams { get; set; } = new object();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalParamsForKdu2
    {
        [Newtonsoft.Json.JsonProperty("kdu_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Kdu_name { get; set; }

        /// <summary>
        /// use this namespace for this KDU
        /// </summary>
        [Newtonsoft.Json.JsonProperty("k8s-namespace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string K8sNamespace { get; set; }

        [Newtonsoft.Json.JsonProperty("kdu_model", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kdu_model { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalParams", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalParams { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Vdu2
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Volume2> Volume { get; set; }

        [Newtonsoft.Json.JsonProperty("interface", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Interface2> Interface { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternalVld2
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkName { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-network-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VimNetworkId { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IpProfile2 IpProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("provider-network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProviderNetwork4 ProviderNetwork { get; set; }

        [Newtonsoft.Json.JsonProperty("internal-connection-point", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<InternalConnectionPoint2> InternalConnectionPoint { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProviderNetwork3
    {
        [Newtonsoft.Json.JsonProperty("physical-network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalNetwork { get; set; }

        [Newtonsoft.Json.JsonProperty("segmentation-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentationId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VnfdConnectionPointRef2
    {
        [Newtonsoft.Json.JsonProperty("member-vnf-index-ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MemberVnfIndexRef { get; set; }

        [Newtonsoft.Json.JsonProperty("vnfd-connection-point-ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VnfdConnectionPointRef { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PerformanceValue1
    {
        [Newtonsoft.Json.JsonProperty("performanceValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double PerformanceValue { get; set; }

        [Newtonsoft.Json.JsonProperty("vnfMemberIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VnfMemberIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("vduName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VduName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IpProfileIpVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ipv4")]
        Ipv4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ipv6")]
        Ipv6 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsServer
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DhcpParams
    {
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Count { get; set; }

        [Newtonsoft.Json.JsonProperty("start-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SdnPorts
    {
        [Newtonsoft.Json.JsonProperty("switch_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Switch_id { get; set; }

        [Newtonsoft.Json.JsonProperty("switch_port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Switch_port { get; set; }

        [Newtonsoft.Json.JsonProperty("mac_address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mac_address { get; set; }

        [Newtonsoft.Json.JsonProperty("vlan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Vlan { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Volume2
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("vim-volume-id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VimVolumeId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Interface2
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("mac-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MacAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("floating-ip-required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FloatingIpRequired { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpProfile2
    {
        [Newtonsoft.Json.JsonProperty("ip-version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IpProfile2IpVersion IpVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("subnet-address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubnetAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway-address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GatewayAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("dns-server", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<DnsServer2> DnsServer { get; set; }

        [Newtonsoft.Json.JsonProperty("dhcp-params", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DhcpParams2 DhcpParams { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProviderNetwork4
    {
        [Newtonsoft.Json.JsonProperty("physical-network", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhysicalNetwork { get; set; }

        [Newtonsoft.Json.JsonProperty("segmentation-id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentationId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternalConnectionPoint2
    {
        [Newtonsoft.Json.JsonProperty("id-ref", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdRef { get; set; }

        [Newtonsoft.Json.JsonProperty("ip-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IpProfile2IpVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ipv4")]
        Ipv4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ipv6")]
        Ipv6 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsServer2
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DhcpParams2
    {
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Count { get; set; }

        [Newtonsoft.Json.JsonProperty("start-address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartAddress { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsmApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public OsmApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OsmApiException<TResult> : OsmApiException
    {
        public TResult Result { get; private set; }

        public OsmApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603