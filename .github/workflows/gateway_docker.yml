name: Gateway docker build

on:
  
  workflow_dispatch:
    inputs:
     -dummy:
  schedule:
    - cron: 0 3 * * 1-5
  push:
    tags:  [ v* ]

jobs:
  build_and_deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2    
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Extract metadata for the Docker image
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.GATEWAY_REPO_NAME }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.GATEWAY_REPO_NAME }}
        AWS_KEY_ID: ${{ secrets.AWS_APP_KEY_ID }}
        AWS_SECRET_KEY: ${{ secrets.AWS_APP_SECRET_KEY }}
        IMAGE_TAG: ${{ steps.meta.outputs.tags }}
      run: |
        # Build a docker container and push it to ECR 
        docker build -f ./src/OcelotGateway/Dockerfile -t $IMAGE_TAG \
         --build-arg AWS_KEY_ID=$AWS_KEY_ID --build-arg AWS_SECRET_KEY=$AWS_SECRET_KEY ./src
        echo "Pushing image to ECR..."
        docker push $IMAGE_TAG
        echo "::set-output name=image::$IMAGE_TAG"
